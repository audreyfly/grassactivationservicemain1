{"version":3,"file":"string-utils.cjs.js","names":["escapeHtml","string","replace","format","template","_len","arguments","length","values","Array","_key","arg","match","token","index"],"sources":["string-utils.js"],"sourcesContent":["/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Escapes special HTML characters in a string with their entity code\n * equivalents.\n * \n * @param {string} string\n * @return {string}\n *   HTML escaped string, safe for use in HTML.\n */\nexport function escapeHtml(string) {\n\n\treturn typeof string !== 'string' ? string : string\n\t\t.replace(/&/g, '&amp;')\n\t\t.replace(/</g, '&lt;')\n\t\t.replace(/>/g, '&gt;')\n\t\t.replace(/\"/g, '&quot;')\n\t\t.replace(/'/g, '&#039;');\n}\n\n/**\n * Returns the replacement of each placeholder in a template string with a\n * corresponding replacement value.\n * \n * @param {string} template\n *   String containing indexed (`{0}`, `{1}`, ...) or named (`{value}`,\n *   `{greeting}`, ...) placeholders, but not both.\n * @param {...string|Record<string,string>} values\n *   Either an argument list / array of values to replace values in an indexed\n *   template string, or an object where the keys are the names in a named\n *   template string to replace with their values.\n * @return {string}\n *   Replaced template string.\n */\nexport function format(template, ...values) {\n\n\tif (values && values.length > 0) {\n\t\tlet arg = values[0];\n\t\tif (values.length === 1 && typeof arg === 'object' && arg !== null) {\n\t\t\treturn template.replace(/\\{(.+?)\\}/g, (match, token) => arg[token]);\n\t\t}\n\t\telse {\n\t\t\treturn template.replace(/\\{(\\d+)\\}/g, (match, index) => values[+index]);\n\t\t}\n\t}\n\treturn template;\n}\n"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,UAAUA,CAACC,MAAM,EAAE;EAElC,OAAO,OAAOA,MAAM,KAAK,QAAQ,GAAGA,MAAM,GAAGA,MAAM,CACjDC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CACtBA,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CACrBA,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CACrBA,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CACvBA,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,MAAMA,CAACC,QAAQ,EAAa;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAARC,MAAM,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAANF,MAAM,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;EAAA;EAEzC,IAAIF,MAAM,IAAIA,MAAM,CAACD,MAAM,GAAG,CAAC,EAAE;IAChC,IAAII,GAAG,GAAGH,MAAM,CAAC,CAAC,CAAC;IACnB,IAAIA,MAAM,CAACD,MAAM,KAAK,CAAC,IAAI,OAAOI,GAAG,KAAK,QAAQ,IAAIA,GAAG,KAAK,IAAI,EAAE;MACnE,OAAOP,QAAQ,CAACF,OAAO,CAAC,YAAY,EAAE,CAACU,KAAK,EAAEC,KAAK,KAAKF,GAAG,CAACE,KAAK,CAAC,CAAC;IACpE,CAAC,MACI;MACJ,OAAOT,QAAQ,CAACF,OAAO,CAAC,YAAY,EAAE,CAACU,KAAK,EAAEE,KAAK,KAAKN,MAAM,CAAC,CAACM,KAAK,CAAC,CAAC;IACxE;EACD;EACA,OAAOV,QAAQ;AAChB"}