{"version":3,"file":"thymeleaf.min.js","sources":["../source/processors/AttributeProcessor.js","../source/standard/processors/AttrAttributeProcessor.js","../node_modules/@ultraq/string-utils/string-utils.es.js","../source/processors/ElementProcessor.js","../node_modules/@ultraq/dom-utils/dom-utils.es.js","../source/utilities/Dom.js","../source/standard/processors/BlockElementProcessor.js","../source/standard/processors/CheckedAttributeProcessor.js","../source/standard/processors/ClassAppendAttributeProcessor.js","../source/standard/processors/EachAttributeProcessor.js","../source/standard/processors/EmptyableAttributeProcessor.js","../source/standard/processors/FragmentAttributeProcessor.js","../source/standard/processors/IfAttributeProcessor.js","../node_modules/dumb-query-selector/dumb-query-selector.js","../source/utilities/Fragments.js","../source/standard/processors/InsertAttributeProcessor.js","../source/standard/processors/RemovableAttributeProcessor.js","../source/standard/processors/RemoveAttributeProcessor.js","../source/standard/processors/ReplaceAttributeProcessor.js","../source/standard/processors/TextAttributeProcessor.js","../source/utilities/Messages.js","../source/standard/processors/UnlessAttributeProcessor.js","../source/standard/processors/UTextAttributeProcessor.js","../source/standard/processors/WithAttributeProcessor.js","../source/standard/processors/XmlNsAttributeProcessor.js","../source/dialects/Dialect.js","../source/standard/StandardDialect.js","../source/Configurations.js","../source/processors/Matcher.js","../source/parser/InputBuffer.js","../source/parser/Parser.js","../source/standard/expressions/ExpressionProcessor.js","../source/standard/expressions/AllInput.js","../source/parser/Rule.js","../source/standard/expressions/ThymeleafRule.js","../source/parser/Grammar.js","../source/parser/Operators.js","../node_modules/@ultraq/array-utils/array-utils.es.js","../source/standard/expressions/FragmentSignatureGrammar.js","../source/standard/expressions/ThymeleafExpressionLanguage.js","../source/parser/RegularExpression.js","../source/utilities/getByPath.js","../source/TemplateEngine.js"],"sourcesContent":["/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Common class for attribute processors.\n * \n * @author Emanuel Rabina\n */\nexport default class AttributeProcessor {\n\n\t/**\n\t * Constructor, sets this processor's prefix and name.\n\t * \n\t * @param {string} prefix\n\t * @param {string} name\n\t * @param {object} [isomorphic]\n\t */\n\tconstructor(prefix, name, isomorphic) {\n\n\t\tthis.prefix     = prefix;\n\t\tthis.name       = name;\n\t\tthis.isomorphic = isomorphic;\n\t}\n\n\t/**\n\t * Process the given attribute on the element it appears.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {string} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {string} attributeValue\n\t *   The value given by the attribute.\n\t * @param {object} context\n\t * @return {boolean} Whether or not the parent tree needs reprocessing because\n\t *   of modifications made by the processor.\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\telement.removeAttribute(attribute);\n\t\tif (this.isomorphic) {\n\t\t\telement.removeAttribute(`${this.prefix}:${this.name}`);\n\t\t}\n\t\treturn false;\n\t}\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AttributeProcessor from '../../processors/AttributeProcessor.js';\n\nimport {escapeHtml} from '@ultraq/string-utils';\n\nexport const NAME = 'attr';\n\n/**\n * JS equivalent of Thymeleaf's `th:attr` attribute processor, modifies or sets\n * a target attribute to whatever its associated expression evaluates to.\n * \n * @author Emanuel Rabina\n */\nexport default class AttrAttributeProcessor extends AttributeProcessor {\n\n\t/**\n\t * Constructor, set this processor to use the `attr` name and supplied prefix.\n\t * \n\t * @param {string} prefix\n\t * @param {object} [isomorphic]\n\t */\n\tconstructor(prefix, isomorphic) {\n\n\t\tsuper(prefix, NAME, isomorphic);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:attr` or `data-th-attr` attribute\n\t * on it, picking out the target attributes and setting them to whatever their\n\t * expressions evaluate to.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {string} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {string} attributeValue\n\t *   The value given by the attribute.\n\t * @param {object} context\n\t * @return {boolean} `false`.\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\t// TODO: This regex, is this some kind of value list that needs to be\n\t\t//       turned into an expression?\n\t\tif (/(.+=.+,)*.+=.+/.test(attributeValue)) {\n\t\t\tattributeValue.split(',').forEach(attribute => {\n\t\t\t\tlet [name, value] = attribute.split('=');\n\t\t\t\tlet processorResult = context.expressionProcessor.process(value, context);\n\t\t\t\telement.setAttribute(name, escapeHtml(\n\t\t\t\t\ttypeof processorResult === 'string' ?\n\t\t\t\t\t\tprocessorResult :\n\t\t\t\t\t\tJSON.stringify(processorResult))\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\t\t/* istanbul ignore next */\n\t\telse if (process.env.NODE_ENV !== 'test') {\n\t\t\tconsole.warn(`Value to ${attribute}, ${attributeValue}, doesn't seem to contain an attribute assignment expression.  Ignoring.`);\n\t\t}\n\t\treturn super.process(element, attribute, attributeValue, context);\n\t}\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Escapes special HTML characters in a string with their entity code\n * equivalents.\n * \n * @param {string} string\n * @return {string}\n *   HTML escaped string, safe for use in HTML.\n */\nexport function escapeHtml(string) {\n  return typeof string !== 'string' ? string : string.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#039;');\n}\n\n/**\n * Returns the replacement of each placeholder in a template string with a\n * corresponding replacement value.\n * \n * @param {string} template\n *   String containing indexed (`{0}`, `{1}`, ...) or named (`{value}`,\n *   `{greeting}`, ...) placeholders, but not both.\n * @param {...string|Record<string,string>} values\n *   Either an argument list / array of values to replace values in an indexed\n *   template string, or an object where the keys are the names in a named\n *   template string to replace with their values.\n * @return {string}\n *   Replaced template string.\n */\nexport function format(template) {\n  for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    values[_key - 1] = arguments[_key];\n  }\n  if (values && values.length > 0) {\n    let arg = values[0];\n    if (values.length === 1 && typeof arg === 'object' && arg !== null) {\n      return template.replace(/\\{(.+?)\\}/g, (match, token) => arg[token]);\n    } else {\n      return template.replace(/\\{(\\d+)\\}/g, (match, index) => values[+index]);\n    }\n  }\n  return template;\n}\n\n//# sourceMappingURL=string-utils.es.js.map","/* \n * Copyright 2019, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Parent class for element processors.\n * \n * @author Emanuel Rabina\n */\nexport default class ElementProcessor {\n\n\t/**\n\t * Constructor, sets this processor's prefix and name.\n\t * \n\t * @param {string} prefix\n\t * @param {string} name\n\t */\n\tconstructor(prefix, name) {\n\n\t\tthis.prefix = prefix;\n\t\tthis.name   = name;\n\t}\n\n\t/**\n\t * Processes the given element.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {object} context\n\t * @return {boolean} Whether or not the parent tree needs reprocessing because\n\t *   of modifications made by the processor.\n\t */\n\tprocess(element, context) {\n\n\t\treturn false;\n\t}\n}\n","/* \n * Copyright 2019, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Add an event listener to `element` that only fires when the target of the\n * event matches `selector`.\n * \n * @param {Element} element\n * @param {string} eventName\n * @param {string} selector\n * @param {EventListener} handler\n */\nexport function addEventDelegate(element, eventName, selector, handler) {\n  element.addEventListener(eventName, event => {\n    if (event.target.matches(selector)) {\n      handler(event);\n    }\n  });\n}\n\n/**\n * Removes all of an element's child nodes.\n * \n * @param {Element} element\n */\nexport function clearChildren(element) {\n  while (element.firstChild) {\n    element.removeChild(element.firstChild);\n  }\n}\n\n/**\n * Deserialize an HTML string into a document fragment.\n * \n * @param {string} htmlString\n * @return {Document}\n */\nexport function deserialize(htmlString) {\n  return new DOMParser().parseFromString(htmlString, 'text/html');\n}\n\n/**\n * Parse the text content of the element picked out by the given selector as\n * JSON data, returning it as an object.\n * \n * @param {string} selector\n *   A CSS selector for picking out the HTML element that contains the JSON data\n *   to load.\n * @param {Document} [scope]\n *   The DOM tree to run the selector over.\n * @return {object}\n *   The JSON data converted to an object, or `null` if no data could be read.\n */\nexport function parseJsonFromElement(selector) {\n  let scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;\n  return JSON.parse(scope.querySelector(selector)?.textContent?.trim() || null);\n}\n\n/**\n * Serialize a document or document fragment into an HTML string.\n * \n * @param {Document|DocumentFragment} documentOrFragment\n * @return {string}\n */\nexport function serialize(documentOrFragment) {\n  if (documentOrFragment.nodeType === Node.DOCUMENT_NODE) {\n    let result = '';\n    let {\n      contentType,\n      docType,\n      firstElementChild\n    } = documentOrFragment;\n    if (docType) {\n      result += `<!DOCTYPE ${docType.name}>`;\n    } else if (firstElementChild.tagName === 'HTML' || contentType === 'text/html') {\n      result += `<!DOCTYPE html>`;\n    }\n    result += firstElementChild.outerHTML;\n    return result;\n  }\n  return documentOrFragment.outerHTML;\n}\n\n//# sourceMappingURL=dom-utils.es.js.map","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* global ENVIRONMENT */\nimport {\n\tdeserialize as domDeserialize,\n\tserialize as domSerialize\n}              from '@ultraq/dom-utils';\nimport {JSDOM} from 'jsdom';\n\n// Node.nodeType values, not present outside of a JSDOM environment so can't\n// reference them w/ Node.X\n// For a full list of values, see: https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\nexport const NODE_TYPE_DOCUMENT_TYPE = 10;\nexport const NODE_TYPE_ELEMENT = 1;\n\n/**\n * Create and return a new HTML fragment using JSDOM from the given string.\n * Used for tests.\n * \n * @param {string} htmlString\n * @return {Element}\n */\nexport function createHtml(htmlString) {\n\treturn new JSDOM(htmlString).window.document.body.firstElementChild;\n}\n\n/**\n * Returns the value of a Thymeleaf attribute processor.\n * \n * @param {Element} element\n * @param {string} prefix\n * @param {string} processorName\n * @return {string} The value of the Thymeleaf attribute processor, or `null`\n *   if the attribute processor wasn't present.\n */\nexport function getThymeleafAttributeValue(element, prefix, processorName) {\n\treturn element.getAttribute(`${prefix}:${processorName}`) ||\n\t       element.getAttribute(`data-${prefix}-${processorName}`);\n}\n\n/**\n * Use either JSDOM or the browser's native DOM parsing to deserialize the HTML\n * string into a document fragment.\n * \n * @param {string} htmlString\n * @return {DocumentFragment}\n */\nexport function deserialize(htmlString) {\n\t/* istanbul ignore if */\n\tif (ENVIRONMENT === 'browser') {\n\t\treturn domDeserialize(htmlString);\n\t}\n\telse {\n\t\treturn new JSDOM(htmlString).window.document;\n\t}\n}\n\n/**\n * Use either JSDOM or the browser's native DOM serialization to serialize a\n * document fragment into an HTML string.\n * \n * @param {DocumentFragment} documentFragment\n * @return {string}\n */\nexport function serialize(documentFragment) {\n\t/* istanbul ignore if */\n\tif (ENVIRONMENT === 'browser') {\n\t\treturn domSerialize(documentFragment);\n\t}\n\telse {\n\t\tlet result = '';\n\t\tlet {firstChild, firstElementChild} = documentFragment;\n\t\tif (firstChild.nodeType === NODE_TYPE_DOCUMENT_TYPE) {\n\t\t\tresult += `<!DOCTYPE ${firstChild.name}>`;\n\t\t}\n\t\treturn result + firstElementChild.outerHTML;\n\t}\n}\n","/* \n * Copyright 2019, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ElementProcessor    from '../../processors/ElementProcessor.js';\nimport {NODE_TYPE_ELEMENT} from '../../utilities/Dom.js';\n\nexport const NAME = 'block';\n\n/**\n * Equivalent of Thymeleaf's \"synthetic tag\", `th:block`, which removes itself,\n * leaving the body of the tag behind.\n * \n * @author Emanuel Rabina\n */\nexport default class BlockElementProcessor extends ElementProcessor {\n\n\t/**\n\t * Constructor, set this processor to use the `block` name and supplied prefix.\n\t * \n\t * @param {string} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, NAME);\n\t}\n\n\t/**\n\t * Processes an element named `th:block`, removing itself to leave its\n\t * body/contents behind.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {object} context\n\t * @return {boolean} `true` to indicate that the elements need reprocessing.\n\t */\n\tprocess(element, context) {\n\n\t\tlet parent = element.parentElement;\n\t\twhile (element.firstChild) {\n\t\t\tlet child = element.firstChild;\n\t\t\tparent.insertBefore(child, element);\n\n\t\t\tif (child.nodeType === NODE_TYPE_ELEMENT && element.__thymeleafLocalVariables) {\n\t\t\t\tchild.__thymeleafLocalVariables = {\n\t\t\t\t\t...(child.__thymeleafLocalVariables || {}),\n\t\t\t\t\t...element.__thymeleafLocalVariables\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\tparent.removeChild(element);\n\n\t\treturn true;\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AttributeProcessor from '../../processors/AttributeProcessor.js';\n\nexport const NAME = 'checked';\n\n/**\n * Thymeleaf's `th:checked` attribute processor, sets or removes the `checked`\n * attribute from an element based on the result of the expression within it.\n * \n * TODO: This is one of HTML5s \"boolean attributes\", attributes whose values are\n *       true simply by being present in the element, regardless of the value\n *       inside it.  To act as false, the attribute has to be removed.  Find a\n *       way to generate these from some list of boolean attributes so that I\n *       don't need to write a class for each one!\n * \n * @author Emanuel Rabina\n */\nexport default class CheckedAttributeProcessor extends AttributeProcessor {\n\n\t/**\n\t * Constructor, set this processor to use the `checked` name and supplied\n\t * prefix.\n\t * \n\t * @param {string} prefix\n\t * @param {object} [isomorphic]\n\t */\n\tconstructor(prefix, isomorphic) {\n\n\t\tsuper(prefix, NAME, isomorphic);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:checked` or `data-th-checked`\n\t * attribute on it, either setting or removing a `checked` attribute to the\n\t * current element based on the result of the inner expression.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {string} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {string} attributeValue\n\t *   The value given by the attribute.\n\t * @param {object} context\n\t * @return {boolean} `false`.\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\tlet result = context.expressionProcessor.process(attributeValue, context);\n\t\tif (result) {\n\t\t\telement.setAttribute('checked', '');\n\t\t}\n\t\telse {\n\t\t\telement.removeAttribute('checked');\n\t\t}\n\n\t\treturn super.process(element, attribute, attributeValue, context);\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AttributeProcessor from '../../processors/AttributeProcessor.js';\n\nexport const NAME = 'classappend';\n\n/**\n * The `th:classappend` is a special attribute that applies the expression to\n * any existing classes already on an element.\n * \n * @author Emanuel Rabina\n */\nexport default class ClassAppendAttributeProcessor extends AttributeProcessor {\n\n\t/**\n\t * Constructor, set this processor to use the `attr` name and supplied prefix.\n\t * \n\t * @param {string} prefix\n\t * @param {object} [isomorphic]\n\t */\n\tconstructor(prefix, isomorphic) {\n\n\t\tsuper(prefix, NAME, isomorphic);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:classappend` or `data-th-classappend`\n\t * attribute on it, adding the resulting classes to any existing classes on\n\t * the current element.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {string} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {string} attributeValue\n\t *   The value given by the attribute.\n\t * @param {object} context\n\t * @return {boolean} `false`.\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\tlet classes = context.expressionProcessor.process(attributeValue, context);\n\t\tif (classes) {\n\t\t\telement.className += ` ${classes}`;\n\t\t}\n\t\treturn super.process(element, attribute, attributeValue, context);\n\t}\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AttributeProcessor from '../../processors/AttributeProcessor.js';\n\nexport const NAME = 'each';\n\n/**\n * JS equivalent of Thymeleaf's `th:each` attribute processor, iterates over an\n * [iterable object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols),\n * executing a piece of template for every iteration.\n * \n * @author Emanuel Rabina\n */\nexport default class EachAttributeProcessor extends AttributeProcessor {\n\n\t/**\n\t * Constructor, set this processor to use the `each` name and supplied prefix.\n\t * \n\t * @param {string} prefix\n\t * @param {object} [isomorphic]\n\t */\n\tconstructor(prefix, isomorphic) {\n\n\t\tsuper(prefix, NAME, isomorphic);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:each`/`data-th-each` attribute,\n\t * repeating the markup for every object in the iterable value.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {string} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {string} attributeValue\n\t *   The value given by the attribute.\n\t * @param {object} context\n\t * @return {boolean} Whether or not the parent element needs to do a second\n\t *   pass as its children have been modified by this processor.\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\tsuper.process(element, attribute, attributeValue, context);\n\n\t\tlet iterationInfo = context.expressionProcessor.process(attributeValue, context);\n\t\tif (iterationInfo) {\n\t\t\tlet {localValueName, iterable} = iterationInfo;\n\t\t\tlet templateNode = element.cloneNode(true);\n\n\t\t\tfor (let value of iterable) {\n\t\t\t\tlet localClone = templateNode.cloneNode(true);\n\t\t\t\tlocalClone.__thymeleafLocalVariables = {\n\t\t\t\t\t[localValueName]: value\n\t\t\t\t};\n\t\t\t\telement.parentElement.appendChild(localClone);\n\t\t\t}\n\t\t}\n\t\telement.parentElement.removeChild(element);\n\n\t\treturn true;\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AttributeProcessor from '../../processors/AttributeProcessor.js';\n\n/**\n * Configurable attribute processor that sets or empties an attribute value on\n * an element if the result of its expression is truthy or falsey respectively.\n * \n * @author Emanuel Rabina\n */\nexport default class EmptyableAttributeProcessor extends AttributeProcessor {\n\n\t/**\n\t * Constructor, set the name of the attribute this processor will operate on.\n\t * \n\t * @param {string} prefix\n\t * @param {string} name\n\t * @param {object} [isomorphic]\n\t */\n\tconstructor(prefix, name, isomorphic) {\n\n\t\tsuper(prefix, name, isomorphic);\n\t}\n\n\t/**\n\t * Processes an element that contains the configured attribute to be worked\n\t * on, setting it if the expression resolves to a truthy value, or removing it\n\t * if it resolves to a falsey value.\n\t * \n\t * @param {Element} element \n\t *   Element being processed.\n\t * @param {string} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {string} attributeValue\n\t *   The value given by the attribute.\n\t * @param {object} context\n\t * @return {boolean} `false`.\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\tlet value = context.expressionProcessor.process(attributeValue, context);\n\t\telement.setAttribute(this.name, value ? value.toString() : '');\n\t\treturn super.process(element, attribute, attributeValue, context);\n\t}\n}\n\nexport const EMPTYABLE_ATTRIBUTE_NAMES = [\n\t'datetime',\n\t'href',\n\t'src',\n\t'style',\n\t'value'\n];\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AttributeProcessor from '../../processors/AttributeProcessor.js';\n\nexport const NAME = 'fragment';\n\n/**\n * JS equivalent of Thymeleaf's `th:fragment` attribute processor, marks an\n * element as a template fragment that can be imported by other processors like\n * `th:insert`.\n * \n * @author Emanuel Rabina\n */\nexport default class FragmentAttributeProcessor extends AttributeProcessor {\n\n\t/**\n\t * Constructor, set this processor to use the `fragment` name and supplied\n\t * prefix.\n\t * \n\t * @param {string} prefix\n\t * @param {object} [isomorphic]\n\t */\n\tconstructor(prefix, isomorphic) {\n\n\t\tsuper(prefix, NAME, isomorphic);\n\t}\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AttributeProcessor from '../../processors/AttributeProcessor.js';\n\nexport const NAME = 'if';\n\n/**\n * JS equivalent of Thymeleaf's `th:if` attribute processor, includes or\n * excludes the current element and its children from rendering, depending on\n * the evaluation of the expression in the attribute value.\n * \n * @author Emanuel Rabina\n */\nexport default class IfAttributeProcessor extends AttributeProcessor {\n\n\t/**\n\t * Constructor, set this processor to use the `if` name and supplied prefix.\n\t * \n\t * @param {string} prefix\n\t * @param {object} [isomorphic]\n\t */\n\tconstructor(prefix, isomorphic) {\n\n\t\tsuper(prefix, NAME, isomorphic);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:if` or `data-th-if` attribute\n\t * on it, evaluating the expression for truthy/falsey, rendering/excluding the\n\t * element and its children based on the result.\n\t * \n\t * @param {Element} element \n\t *   Element being processed.\n\t * @param {string} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {string} attributeValue\n\t *   The value given by the attribute.\n\t * @param {object} context\n\t * @return {boolean} `true` if the element was removed.\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\tlet expressionResult = context.expressionProcessor.process(attributeValue, context);\n\t\tif (!expressionResult) {\n\t\t\telement.remove();\n\t\t\treturn true;\n\t\t}\n\t\treturn super.process(element, attribute, attributeValue, context);\n\t}\n}\n","/* \n * Copyright 2015, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n(function(root, factory) {\n\t'use strict';\n\n\t// AMD\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine('dumb-query-selector', [], factory);\n\t}\n\t// CommonJS\n\telse if (typeof module === 'object' && module.exports) {\n\t\tmodule.exports = factory();\n\t}\n\t// Global\n\telse {\n\t\tvar dumbQuerySelector = factory();\n\t\tObject.keys(dumbQuerySelector).forEach(function(key) {\n\t\t\troot[key] = dumbQuerySelector[key];\n\t\t});\n\t}\n})(this, function() {\n\t'use strict';\n\n\treturn {\n\n\t\t/**\n\t\t * An element selector and shortcut for `(document/element).querySelector`.\n\t\t * \n\t\t * @param {String} query\n\t\t * @param {Node} [scope=document]\n\t\t *   The scope to limit the search to for non-ID queries.  Defaults to\n\t\t *   `document` scope.\n\t\t * @return {Element} The matching element, or `null` if no match is found.\n\t\t */\n\t\t$: function(query, scope) {\n\t\t\treturn (scope || document).querySelector(query);\n\t\t},\n\n\t\t/**\n\t\t * An element list selector, returning an array of elements because\n\t\t * `NodeList`s are dumb.\n\t\t * \n\t\t * @param {String} query\n\t\t * @param {Node} [scope=document]\n\t\t *   The scope to limit the search to for non-ID queries.  Defaults to\n\t\t *   `document` scope.\n\t\t * @return {Array} The list of matching elements.\n\t\t */\n\t\t$$: function(query, scope) {\n\t\t\treturn Array.prototype.slice.call((scope || document).querySelectorAll(query));\n\t\t}\n\t};\n});\n","/* \n * Copyright 2019, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {deserialize} from './Dom.js';\nimport {NAME}        from '../standard/processors/FragmentAttributeProcessor.js';\n\nimport {$} from 'dumb-query-selector';\n\n/**\n * Extract HTML from the target identified by the given fragment information.\n * \n * @param {string} dialectPrefix\n * @param {object} fragmentInfo\n * @param {object} context\n * @return {Promise<Element>}\n */\nexport async function extractFragment(dialectPrefix, fragmentInfo, context) {\n\tlet {templateResolver} = context;\n\tif (templateResolver) {\n\t\tlet {templateName, fragmentName} = fragmentInfo;\n\t\tlet template = deserialize(await templateResolver(templateName));\n\t\treturn $(`[${dialectPrefix}\\\\:${NAME}^=\"${fragmentName}\"]`, template) ||\n\t\t\t\t\t $(`[data-${dialectPrefix}-${NAME}^=\"${fragmentName}\"]`, template);\n\t}\n\tconsole.log('No template resolver configured');\n\treturn null;\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {NAME as FragmentAttributeProcessorName} from './FragmentAttributeProcessor.js';\nimport AttributeProcessor                       from '../../processors/AttributeProcessor.js';\nimport {getThymeleafAttributeValue}             from '../../utilities/Dom.js';\nimport {extractFragment}                        from '../../utilities/Fragments.js';\n\nimport {clearChildren} from '@ultraq/dom-utils';\n\nexport const NAME = 'insert';\n\n/**\n * JS equivalent of Thymeleaf's `th:insert` attribute processor, inserts the\n * referenced template fragment as a child of the current element.\n * \n * @author Emanuel Rabina\n */\nexport default class InsertAttributeProcessor extends AttributeProcessor {\n\n\t/**\n\t * Constructor, set this processor to use the `insert` name and supplied\n\t * prefix.\n\t * \n\t * @param {string} prefix\n\t * @param {object} [isomorphic]\n\t */\n\tconstructor(prefix, isomorphic) {\n\n\t\tsuper(prefix, NAME, isomorphic);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:insert`/`data-th-insert` attribute,\n\t * replacing the current element's children with the DOM in the referenced\n\t * fragment.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {string} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {string} attributeValue\n\t *   The value given by the attribute.\n\t * @param {object} context\n\t * @return {boolean} Whether or not the parent element needs to do a second\n\t *   pass as its children have been modified by this processor.\n\t */\n\tasync process(element, attribute, attributeValue, context) {\n\n\t\tsuper.process(element, attribute, attributeValue, context);\n\t\tclearChildren(element);\n\n\t\tlet fragmentInfo = context.expressionProcessor.process(attributeValue, context);\n\t\tif (fragmentInfo) {\n\t\t\tlet fragment = await extractFragment(this.prefix, fragmentInfo, context);\n\t\t\tif (fragment) {\n\t\t\t\tlet fragmentSignature = getThymeleafAttributeValue(fragment, this.prefix, FragmentAttributeProcessorName);\n\t\t\t\tlet {parameterNames} = context.fragmentSignatureProcessor.process(fragmentSignature, context);\n\t\t\t\tif (parameterNames) {\n\t\t\t\t\tlet {parameters} = fragmentInfo;\n\t\t\t\t\tlet localContext = {};\n\t\t\t\t\tparameterNames.forEach((parameterName, index) => {\n\t\t\t\t\t\tlocalContext[parameterName] = parameters[parameterName] || parameters[index] || null;\n\t\t\t\t\t});\n\t\t\t\t\tfragment.__thymeleafLocalVariables = localContext;\n\t\t\t\t}\n\t\t\t\telement.appendChild(fragment);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AttributeProcessor from '../../processors/AttributeProcessor.js';\n\n/**\n * Configurable attribute processor that sets or removes an attribute on an\n * element if the result of its expression is truthy or falsey respectively.\n * \n * @author Emanuel Rabina\n */\nexport default class RemovableAttributeProcessor extends AttributeProcessor {\n\n\t/**\n\t * Constructor, set the name of the attribute this processor will operate on.\n\t * \n\t * @param {string} prefix\n\t * @param {string} name\n\t * @param {object} [isomorphic]\n\t */\n\tconstructor(prefix, name, isomorphic) {\n\n\t\tsuper(prefix, name, isomorphic);\n\t}\n\n\t/**\n\t * Processes an element that contains the configured attribute to be worked\n\t * on, setting it if the expression resolves to a truthy value, or removing it\n\t * if it resolves to a falsey value.\n\t * \n\t * @param {Element} element \n\t *   Element being processed.\n\t * @param {string} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {string} attributeValue\n\t *   The value given by the attribute.\n\t * @param {object} context\n\t * @return {boolean} `false`.\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\tlet value = context.expressionProcessor.process(attributeValue, context);\n\t\tif (value) {\n\t\t\telement.setAttribute(this.name, value.toString());\n\t\t}\n\t\telse {\n\t\t\telement.removeAttribute(this.name);\n\t\t}\n\n\t\treturn super.process(element, attribute, attributeValue, context);\n\t}\n}\n\nexport const REMOVABLE_ATTRIBUTE_NAMES = [\n\t'alt',\n\t'class'\n];\n","/* \n * Copyright 2019, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AttributeProcessor from '../../processors/AttributeProcessor.js';\n\nexport const NAME = 'remove';\n\n/**\n * `th:remove`, used to remove the current element or select parts of it (and\n * its children).\n * \n * @author Emanuel Rabina\n */\nexport default class RemoveAttributeProcessor extends AttributeProcessor {\n\n\t/**\n\t * Constructor, set this processor to use the `remove` name and supplied\n\t * prefix.\n\t * \n\t * @param {string} prefix\n\t * @param {object} [isomorphic]\n\t */\n\tconstructor(prefix, isomorphic) {\n\n\t\tsuper(prefix, NAME, isomorphic);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:remove`/`data-th-remove`\n\t * attribute, removing the current element or parts of it based on the\n\t * attribute value.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {string} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {string} attributeValue\n\t *   The value given by the attribute.\n\t * @param {object} context\n\t * @return {boolean} Whether reprocessing behaviour needs to be applied, only\n\t *   when the current tag has been removed.\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\tsuper.process(element, attribute, attributeValue, context);\n\n\t\tswitch (attributeValue) {\n\t\t\tcase 'all':\n\t\t\t\telement.parentElement.removeChild(element);\n\t\t\t\treturn true;\n\t\t\tcase 'all-but-first':\n\t\t\t\twhile (element.lastElementChild !== element.firstElementChild) {\n\t\t\t\t\telement.removeChild(element.lastElementChild);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t}\n\t}\n}\n","/*\n * Copyright 2019, Emanuel Rabina (http://www.ultraq.net.nz/)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {NAME as FragmentAttributeProcessorName} from './FragmentAttributeProcessor.js';\nimport AttributeProcessor                       from '../../processors/AttributeProcessor.js';\nimport {getThymeleafAttributeValue}             from '../../utilities/Dom.js';\nimport {extractFragment}                        from '../../utilities/Fragments.js';\n\nimport {clearChildren} from '@ultraq/dom-utils';\n\nexport const NAME = 'replace';\n\n/**\n * JS equivalent of Thymeleaf's `th:relace` attribute processor, replaces the\n * current element with the fragment referenced by the processor.\n * \n * @author Emanuel Rabina\n */\nexport default class ReplaceAttributeProcessor extends AttributeProcessor {\n\n\t/**\n\t * Constructor, set this processor to use the `replace` name and supplied\n\t * prefix.\n\t * \n\t * @param {string} prefix\n\t * @param {object} [isomorphic]\n\t */\n\tconstructor(prefix, isomorphic) {\n\n\t\tsuper(prefix, NAME, isomorphic);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:replace`/`data-th-replace`\n\t * attribute, replacing the current element with the DOM in the referenced\n\t * fragment.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {string} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {string} attributeValue\n\t *   The value given by the attribute.\n\t * @param {object} context\n\t * @return {boolean} Whether or not the parent element needs to do a second\n\t *   pass as its children have been modified by this processor.\n\t */\n\tasync process(element, attribute, attributeValue, context) {\n\n\t\tsuper.process(element, attribute, attributeValue, context);\n\t\tclearChildren(element);\n\n\t\tlet fragmentInfo = context.expressionProcessor.process(attributeValue, context);\n\t\tif (fragmentInfo) {\n\t\t\tlet fragment = await extractFragment(this.prefix, fragmentInfo, context);\n\t\t\tif (fragment) {\n\t\t\t\tlet fragmentSignature = getThymeleafAttributeValue(fragment, this.prefix, FragmentAttributeProcessorName);\n\t\t\t\tlet {parameterNames} = context.fragmentSignatureProcessor.process(fragmentSignature, context);\n\t\t\t\tif (parameterNames) {\n\t\t\t\t\tlet {parameters} = fragmentInfo;\n\t\t\t\t\tlet localContext = {};\n\t\t\t\t\tparameterNames.forEach((parameterName, index) => {\n\t\t\t\t\t\tlocalContext[parameterName] = parameters[parameterName] || parameters[index] || null;\n\t\t\t\t\t});\n\t\t\t\t\tfragment.__thymeleafLocalVariables = localContext;\n\t\t\t\t}\n\n\t\t\t\t// TODO: Can simplify this with insertAdjacent*(), but need to upgrade\n\t\t\t\t//       JSDOM first.\n\t\t\t\telement.parentElement.insertBefore(fragment, element);\n\t\t\t\telement.remove();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\telement.remove();\n\t\treturn false;\n\t}\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AttributeProcessor from '../../processors/AttributeProcessor.js';\nimport {buildMessage}     from '../../utilities/Messages.js';\n\nexport const NAME = 'text';\n\n/**\n * JS equivalent of Thymeleaf's `th:text` attribute processor, applies the\n * expression in the attribute value to the text content of the element being\n * processed, escaping any unsafe input.\n * \n * @author Emanuel Rabina\n */\nexport default class TextAttributeProcessor extends AttributeProcessor {\n\n\t/**\n\t * Constructor, set this processor to use the `text` name and supplied prefix.\n\t * \n\t * @param {string} prefix\n\t * @param {object} [isomorphic]\n\t */\n\tconstructor(prefix, isomorphic) {\n\n\t\tsuper(prefix, NAME, isomorphic);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:text` or `data-th-text` attribute\n\t * on it, taking the text expression in the value and applying it to the text\n\t * content of the element.\n\t * \n\t * @param {Element} element \n\t *   Element being processed.\n\t * @param {string} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {string} attributeValue\n\t *   The value given by the attribute.\n\t * @param {object} context\n\t * @return {boolean} `false`.\n\t */\n\tasync process(element, attribute, attributeValue, context) {\n\n\t\t// TODO: Move message constructon to the expression language?  Need to make\n\t\t//       all the executions async!\n\t\tlet messageResult = context.expressionProcessor.process(attributeValue, context);\n\t\telement.textContent =\n\t\t\ttypeof messageResult === 'object' ? await buildMessage(messageResult, context.messageResolver) :\n\t\t\tmessageResult;\n\t\treturn super.process(element, attribute, attributeValue, context);\n\t}\n}\n","/* \n * Copyright 2019, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Build a message string from a processed message expression.\n * \n * @param {object} messageInfo\n * @param {Function} messageResolver\n * @return {Promise<string>}\n */\nexport async function buildMessage(messageInfo, messageResolver) {\n\tif (messageResolver) {\n\t\tlet {key, parameters} = messageInfo;\n\t\treturn await messageResolver(key, parameters) || '';\n\t}\n\tconsole.log('No message resolver configured');\n\treturn null;\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AttributeProcessor from '../../processors/AttributeProcessor.js';\n\nimport {clearChildren} from '@ultraq/dom-utils';\n\nexport const NAME = 'unless';\n\n/**\n * JS equivalent of Thymeleaf's `th:unless` attribute processor, excludes or\n * includes the current element and its children from rendering, depending on\n * the evaluation of the expression in the attribute value.\n * \n * @author Robbie Bardijn\n */\nexport default class UnlessAttributeProcessor extends AttributeProcessor {\n\n\t/**\n\t * Constructor, set this processor to use the `unless` name and supplied prefix.\n\t * \n\t * @param {string} prefix\n\t * @param {object} [isomorphic]\n\t */\n\tconstructor(prefix, isomorphic) {\n\n\t\tsuper(prefix, NAME, isomorphic);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:unless` or `data-th-unless` attribute\n\t * on it, evaluating the expression for falsey/truthy, excluding/rendering the\n\t * element and its children based on the result.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {string} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {string} attributeValue\n\t *   The value given by the attribute.\n\t * @param {object} context\n\t * @return {boolean} `true` if the element was removed.\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\tlet expressionResult = context.expressionProcessor.process(attributeValue, context);\n\t\tif (expressionResult) {\n\t\t\tclearChildren(element);\n\t\t\t// TODO: element.remove()?\n\t\t\telement.parentNode.removeChild(element);\n\t\t\treturn true;\n\t\t}\n\t\treturn super.process(element, attribute, attributeValue, context);\n\t}\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AttributeProcessor from '../../processors/AttributeProcessor.js';\n\nexport const NAME = 'utext';\n\n/**\n * JS equivalent of Thymeleaf's `th:utext` attribute processor, applies the\n * expression in the attribute value to the text content of the element being\n * processed.\n * \n * @author Emanuel Rabina\n */\nexport default class UTextAttributeProcessor extends AttributeProcessor {\n\n\t/**\n\t * Constructor, set this processor to use the `utext` name and supplied\n\t * prefix.\n\t * \n\t * @param {string} prefix\n\t * @param {object} [isomorphic]\n\t */\n\tconstructor(prefix, isomorphic) {\n\n\t\tsuper(prefix, NAME, isomorphic);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:utext` or `data-th-utext`\n\t * attribute on it, taking the text expression in the value and applying it to\n\t * the text content of the element.\n\t *\n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {string} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {string} attributeValue\n\t *   The value given by the attribute.\n\t * @param {object} context\n\t * @return {boolean} `false`.\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\telement.innerHTML = context.expressionProcessor.process(attributeValue, context);\n\t\treturn super.process(element, attribute, attributeValue, context);\n\t}\n}\n","/* \n * Copyright 2019, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AttributeProcessor from '../../processors/AttributeProcessor.js';\n\nexport const NAME = 'with';\n\n/**\n * `th:with`, used for creating scoped variables, useful for aliasing things.\n * \n * @author Emanuel Rabina\n */\nexport default class WithAttributeProcessor extends AttributeProcessor {\n\n\t/**\n\t * Constructor, set this processor to use the `with` name and supplied\n\t * prefix.\n\t * \n\t * @param {string} prefix\n\t * @param {object} [isomorphic]\n\t */\n\tconstructor(prefix, isomorphic) {\n\n\t\tsuper(prefix, NAME, isomorphic);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:with`/`data-th-with` attribute,\n\t * setting a variable scoped to the current element with the given name.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {string} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {string} attributeValue\n\t *   The value given by the attribute.\n\t * @param {object} context\n\t * @return {boolean} `true` as adding new local variables needs to re-run\n\t *   processing.\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\tsuper.process(element, attribute, attributeValue, context);\n\n\t\tlet localVariables = {};\n\t\tlet aliases = context.expressionProcessor.process(attributeValue, context);\n\t\taliases.forEach(({name, value}) => {\n\t\t\tlocalVariables[name] = value;\n\t\t});\n\t\telement.__thymeleafLocalVariables = localVariables;\n\n\t\treturn true;\n\t}\n}\n","/* \n * Copyright 2020, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AttributeProcessor from '../../processors/AttributeProcessor.js';\n\n/**\n * `xmlns:th`, used for removing the Thymeleaf XML namespace often added to HTML\n * files to satisfy the XML validators that are used to edit them.\n * \n * @author Emanuel Rabina\n */\nexport default class XmlNsAttributeProcessor extends AttributeProcessor {\n\n\t/**\n\t * Constructor, set this processor to operate on the given XML namespace.\n\t * \n\t * @param {string} prefix\n\t * @param {object} isomorphic\n\t */\n\tconstructor(prefix, isomorphic) {\n\n\t\tsuper('xmlns', prefix);\n\t\tthis.isomorphic = isomorphic;\n\t}\n\n\t/**\n\t * Removes the XML namespace from an element.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {string} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {string} attributeValue\n\t *   The value given by the attribute.\n\t * @param {object} context\n\t * @return {boolean} `false`, as removing the XML namespace never requires\n\t *   repropcessing.\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\telement.removeAttribute(attribute);\n\t\tif (this.isomorphic) {\n\t\t\telement.removeAttribute(`xmlns:${this.isomorphic.prefix}`);\n\t\t}\n\t\treturn false;\n\t}\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Common class for dialects.\n * \n * @author Emanuel Rabina\n */\nexport default class Dialect {\n\n\t/**\n\t * Constructor, sets this dialect's name and optional prefix.\n\t * \n\t * @param {string} name\n\t * @param {string} [prefix]\n\t */\n\tconstructor(name, prefix) {\n\n\t\tthis.name   = name;\n\t\tthis.prefix = prefix;\n\t}\n\n\t/**\n\t * Return an object whose keys are the expression object names, the values the\n\t * expression object available properties and methods.\n\t * \n\t * @return {object}\n\t */\n\tget expressionObjects() {\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Return an array of processors.\n\t * \n\t * @return {Array}\n\t */\n\tget processors() {\n\n\t\treturn null;\n\t}\n}\n","/*\n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AttrAttributeProcessor        from './processors/AttrAttributeProcessor.js';\nimport BlockElementProcessor         from './processors/BlockElementProcessor.js';\nimport CheckedAttributeProcessor     from './processors/CheckedAttributeProcessor.js';\nimport ClassAppendAttributeProcessor from './processors/ClassAppendAttributeProcessor.js';\nimport EachAttributeProcessor        from './processors/EachAttributeProcessor.js';\nimport EmptyableAttributeProcessor, {\n\tEMPTYABLE_ATTRIBUTE_NAMES\n}                                    from './processors/EmptyableAttributeProcessor.js';\nimport FragmentAttributeProcessor    from './processors/FragmentAttributeProcessor.js';\nimport IfAttributeProcessor          from './processors/IfAttributeProcessor.js';\nimport InsertAttributeProcessor      from './processors/InsertAttributeProcessor.js';\nimport RemovableAttributeProcessor, {\n\tREMOVABLE_ATTRIBUTE_NAMES\n}                                    from './processors/RemovableAttributeProcessor.js';\nimport RemoveAttributeProcessor      from './processors/RemoveAttributeProcessor.js';\nimport ReplaceAttributeProcessor     from './processors/ReplaceAttributeProcessor.js';\nimport TextAttributeProcessor        from './processors/TextAttributeProcessor.js';\nimport UnlessAttributeProcessor      from './processors/UnlessAttributeProcessor.js';\nimport UTextAttributeProcessor       from './processors/UTextAttributeProcessor.js';\nimport WithAttributeProcessor        from './processors/WithAttributeProcessor.js';\nimport XmlNsAttributeProcessor       from './processors/XmlNsAttributeProcessor.js';\nimport Dialect                       from '../dialects/Dialect.js';\n\nexport const NAME = 'Standard';\nexport const DEFAULT_PREFIX = 'thjs';\n\n/**\n * The out-of-the-box dialect for Thymeleaf, the \"Standard Dialect\".\n * \n * @author Emanuel Rabina\n */\nexport default class StandardDialect extends Dialect {\n\n\t/**\n\t * Create an instance of this dialect with the name \"Standard\" and given\n\t * prefix.\n\t * \n\t * @param {string} [prefix]\n\t * @param {object} [isomorphic]\n\t */\n\tconstructor(prefix = DEFAULT_PREFIX, isomorphic) {\n\n\t\tsuper(NAME, prefix);\n\t\tthis.isomorphic = isomorphic;\n\t}\n\n\t/**\n\t * Returns the supported standard processors.\n\t * \n\t * @return {Array} A list of the processors included in this dialect.\n\t */\n\tget processors() {\n\n\t\t// TODO: This is a very basic way of imposing the order of attribute\n\t\t//       processors.  It's currently ordered in the same way as OG\n\t\t//       Thymeleaf.  Figure out a 'proper' way to do the ordering.\n\n\t\t// Order taken from https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#attribute-precedence\n\t\tlet {prefix, isomorphic} = this;\n\t\treturn [\n\t\t\t// Fragment inclusion\n\t\t\tnew InsertAttributeProcessor(prefix, isomorphic),\n\t\t\tnew ReplaceAttributeProcessor(prefix, isomorphic),\n\n\t\t\t// Fragment iteration\n\t\t\tnew EachAttributeProcessor(prefix, isomorphic),\n\n\t\t\t// Conditional evaluation\n\t\t\tnew IfAttributeProcessor(prefix, isomorphic),\n\t\t\tnew UnlessAttributeProcessor(prefix, isomorphic),\n\n\t\t\t// Local variable definition\n\t\t\tnew WithAttributeProcessor(prefix, isomorphic),\n\n\t\t\t// General attribute modification\n\t\t\tnew AttrAttributeProcessor(prefix, isomorphic),\n\t\t\tnew ClassAppendAttributeProcessor(prefix, isomorphic),\n\t\t\t...EMPTYABLE_ATTRIBUTE_NAMES.map(attributeName => {\n\t\t\t\treturn new EmptyableAttributeProcessor(prefix, attributeName, isomorphic);\n\t\t\t}),\n\t\t\t...REMOVABLE_ATTRIBUTE_NAMES.map(attributeName => {\n\t\t\t\treturn new RemovableAttributeProcessor(prefix, attributeName, isomorphic);\n\t\t\t}),\n\n\t\t\t// Specific attribute modification\n\t\t\tnew CheckedAttributeProcessor(prefix, isomorphic),\n\n\t\t\t// Text\n\t\t\tnew TextAttributeProcessor(prefix, isomorphic),\n\t\t\tnew UTextAttributeProcessor(prefix, isomorphic),\n\n\t\t\t// Fragment specification\n\t\t\tnew FragmentAttributeProcessor(prefix, isomorphic),\n\n\t\t\t// Fragment removal\n\t\t\tnew RemoveAttributeProcessor(prefix, isomorphic),\n\n\t\t\t// Element processors\n\t\t\tnew BlockElementProcessor(prefix),\n\n\t\t\t// Misc\n\t\t\tnew XmlNsAttributeProcessor(prefix, isomorphic)\n\t\t];\n\t}\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport StandardDialect from './standard/StandardDialect.js';\n\n/**\n * Configuration object for the template engine.\n * \n * @typedef {object} Configuration\n * @property {Array<Dialect>} dialects\n *   A list of dialects to include with this instance of the template engine.\n * @property {object} [isomorphic]\n *   An object which configures the isomorphic capabilities of the template\n *   engine.\n * @property {Function} messageResolver\n *   A function for building a message string from some external source, given a\n *   message key and optional parameters for that particular message.\n * @property {Function} templateResolver\n *   A function for returning the text of templates named by fragment\n *   expressions in templates.  Is given only 1 argument, the template name from\n *   a fragment expression, and should return a Promise of the template text.\n */\n\n/**\n * Default configuration for the template engine, configures the standard\n * dialect with no options (uses `thjs` as the prefix).\n * \n * @type {Configuration}\n */\nexport const DEFAULT_CONFIGURATION = {\n\tdialects: [\n\t\tnew StandardDialect()\n\t]\n};\n\n/**\n * Standard configuration, configures the standard dialect with the `th` prefix\n * and enables isomorphic mode which enables the ability to use much of the same\n * processors across original Thymeleaf and ThymeleafJS.\n * \n * @type {Configuration}\n */\nexport const STANDARD_CONFIGURATION = {\n\t...DEFAULT_CONFIGURATION,\n\tdialects: [\n\t\tnew StandardDialect('th', {\n\t\t\tprefix: 'thjs'\n\t\t})\n\t]\n};\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AttributeProcessor from './AttributeProcessor.js';\nimport ElementProcessor   from './ElementProcessor.js';\n\n/**\n * Class for determining if an element contains a processor on it.\n * \n * @author Emanuel Rabina\n */\nexport default class Matcher {\n\n\t/**\n\t * Return the matching attribute or element that a processor can work over.\n\t * \n\t * @param {Element} element\n\t * @param {AttributeProcessor} processor\n\t * @return {string}\n\t *   A match result containing what was matched (either an attribute or an\n\t *   element, relevant to the processor being tested), or `null` if nothing\n\t *   was matched.\n\t */\n\tmatches(element, processor) {\n\n\t\tlet {isomorphic, name, prefix} = processor;\n\n\t\t// Attribute processor matching, can be of the name prefix:name or data-prefix-name\n\t\tif (processor instanceof AttributeProcessor) {\n\t\t\tlet prefixes = [prefix];\n\t\t\tif (isomorphic) {\n\t\t\t\tprefixes.unshift(isomorphic.prefix);\n\t\t\t}\n\t\t\tfor (let prefix of prefixes) {\n\t\t\t\tlet attribute;\n\t\t\t\tattribute = `${prefix}:${name}`;\n\t\t\t\tif (element.hasAttribute(attribute)) {\n\t\t\t\t\treturn attribute;\n\t\t\t\t}\n\t\t\t\tattribute = `data-${prefix}-${name}`;\n\t\t\t\tif (element.hasAttribute(attribute)) {\n\t\t\t\t\treturn attribute;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Element processor, can only be of the name prefix:name\n\t\telse if (processor instanceof ElementProcessor) {\n\t\t\tlet elementName = `${processor.prefix}:${name}`;\n\t\t\tif (element.tagName === elementName.toUpperCase()) {\n\t\t\t\treturn elementName;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Wrapper around the string being parsed, with a position that keeps track of\n * what part of the imput is currently being read/tested.\n * \n * @author Emanuel Rabina\n */\nexport default class InputBuffer {\n\n\t/**\n\t * @private\n\t * @type {number}\n\t */\n\tposition = 0;\n\n\t/**\n\t * @private\n\t * @type {Array<number>}\n\t */\n\tpositionStack = [];\n\n\t/**\n\t * @param {string} input\n\t */\n\tconstructor(input) {\n\n\t\tthis.input = input;\n\t}\n\n\t/**\n\t * Clear the previously {@link #mark}ed position.\n\t */\n\tclear() {\n\n\t\tlet lastPosition = this.positionStack.pop();\n\t\tif (lastPosition === undefined) {\n\t\t\tthrow new Error('Called clear() but no matching mark()');\n\t\t}\n\t}\n\n\t/**\n\t * Returns whether or not the current position is at the end of the input,\n\t * meaning we've exhausted the entire input string.\n\t * \n\t * @return {boolean}\n\t */\n\texhausted() {\n\n\t\treturn this.position === this.input.length;\n\t}\n\n\t/**\n\t * Sets a mark at the current position so that it can be returned to by a\n\t * matching {@link #reset} call.\n\t */\n\tmark() {\n\n\t\tthis.positionStack.push(this.position);\n\t}\n\n\t/**\n\t * Convenience method for surrounding a function with a call to {@link #mark},\n\t * then {@link #clear} if the result of the function is non-null, or\n\t * {@link #reset} if `null`.\n\t * \n\t * @template T\n\t * @param {Function<T>} func\n\t * @return {T}\n\t */\n\tmarkAndClearOrReset(func) {\n\n\t\tthis.mark();\n\t\tlet result = func();\n\t\tif (result !== null) {\n\t\t\tthis.clear();\n\t\t\treturn result;\n\t\t}\n\t\tthis.reset();\n\t\treturn null;\n\t}\n\n\t/**\n\t * Reads as many characters from the current position as satisfies the given\n\t * pattern, returning the read characters and advancing the mark by as many\n\t * characters.\n\t * \n\t * @param {RegExp} pattern\n\t * @return {Array} The array of matched strings, or `null` if the pattern\n\t *   didn't match.\n\t */\n\tread(pattern) {\n\n\t\tlet remaining = this.input.substring(this.position);\n\t\tlet leadingWhitespace = remaining.match(/^\\s+/);\n\t\tif (leadingWhitespace) {\n\t\t\tleadingWhitespace = leadingWhitespace[0];\n\t\t\tremaining = remaining.substring(leadingWhitespace.length);\n\t\t}\n\t\tlet result = new RegExp(pattern.source).exec(remaining);\n\t\tif (result) {\n\t\t\tlet [value] = result;\n\t\t\tif (remaining.startsWith(value)) {\n\t\t\t\tthis.position += (value.length + (leadingWhitespace ? leadingWhitespace.length : 0));\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Revert to the last @{link #mark}ed position.\n\t */\n\treset() {\n\n\t\tlet newPosition = this.positionStack.pop();\n\t\tif (newPosition === undefined) {\n\t\t\tthrow new Error('Called reset() but no matching mark()');\n\t\t}\n\t\tthis.position = newPosition;\n\t}\n}\n","/*\n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport InputBuffer from './InputBuffer';\n\n/**\n * Any one of the objects that can be matched:\n *  - an expression function\n *  - a string that references another rule\n *  - a regular expression\n * \n * @typedef {string | RegExp | Function} Matchable\n */\n\n/**\n * A recursive descent parser for any parsing expression grammar defined by the\n * constructs in this module.\n * \n * TODO: Own module?\n * \n * @author Emanuel Rabina\n */\nexport default class Parser {\n\n\texpressionStack = [];\n\n\t/**\n\t * @param {Grammar} grammar\n\t */\n\tconstructor(grammar) {\n\n\t\tthis.grammar = grammar;\n\t}\n\n\t/**\n\t * Parse a string, attempting to build the parse tree defined by the rules in\n\t * the configured grammar.  Parsing is considered successful when there are no\n\t * more non-terminating symbols in the grammar and all of the input has been\n\t * read.\n\t * \n\t * @param {string} input\n\t * @return {object} The parse tree if the input could be parsed, `null`\n\t *   otherwise.\n\t */\n\tparse(input) {\n\n\t\tlet inputBuffer = new InputBuffer(input);\n\t\tlet matchResult = this.grammar.accept(inputBuffer, this);\n\t\tif (matchResult === null || !inputBuffer.exhausted()) {\n\t\t\tlet errorMessage = `Failed to parse \"${input}\"`;\n\n\t\t\t// Don't bring down the thread if we can't parse\n\t\t\tif (process.env.NODE_ENV === 'production') {\n\t\t\t\tconsole.error(errorMessage);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new Error(errorMessage);\n\t\t\t}\n\t\t}\n\t\treturn matchResult;\n\t}\n\n\t/**\n\t * Parse the input against the given expression.  An expression can either be\n\t * a reference to another rule in the current grammar, or a regular expression\n\t * that consumes input.\n\t * \n\t * @param {InputBuffer} input\n\t * @param {Matchable} expression\n\t * @return {object}\n\t */\n\tparseWithExpression(input, expression) {\n\n\t\t// Name of another rule in the grammar\n\t\tif (typeof expression === 'string') {\n\t\t\tlet rule = this.grammar.findRuleByName(expression);\n\t\t\treturn rule ? rule.accept(input, this) : null;\n\t\t}\n\n\t\t// A regular expression that must be matched\n\t\telse if (expression instanceof RegExp) {\n\t\t\tlet result = input.read(expression);\n\t\t\tif (result) {\n\t\t\t\treturn result[0];\n\t\t\t}\n\t\t}\n\n\t\t// An expression function to be executed\n\t\telse if (typeof expression === 'function') {\n\t\t\treturn expression(input, this);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Surrounds a function that evaluates an expression with tracking it against\n\t * the current stack.  Useful for knowing how the current expression was\n\t * arrived at through the grammar's rules.\n\t * \n\t * @template T\n\t * @param {InputBuffer} input\n\t * @param {Matchable} expression\n\t * @param {string} name\n\t * @param {Function<T>} func\n\t * @return {T}\n\t */\n\ttrackExpression(input, expression, name, func) {\n\n\t\tlet stackSize = this.expressionStack.push({\n\t\t\tname,\n\t\t\texpression: typeof expression !== 'function' ? expression.toString() : null,\n\t\t\tinput: input.input.substring(input.position)\n\t\t});\n\t\tlet result = func();\n\t\tif (result !== null) {\n\t\t\treturn result;\n\t\t}\n\t\tthis.expressionStack.splice(stackSize - 1);\n\t\treturn null;\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Parser from '../../parser/Parser.js';\n\n/**\n * Parses and executes Thymeleaf expressions.\n * \n * TODO: Create a shared instance of this for a processing context so that it\n *       doesn't need to be recreated over and over.\n * \n * @author Emanuel Rabina\n */\nexport default class ExpressionProcessor {\n\n\t/**\n\t * Constructor, create a new processor that can parse/execute a string in the\n\t * given grammar.\n\t * \n\t * @param {Grammar} grammar\n\t */\n\tconstructor(grammar) {\n\n\t\tthis.parser = new Parser(grammar);\n\t}\n\n\t/**\n\t * Parse and execute the given input as a Thymeleaf expression.\n\t * \n\t * @param {string} input\n\t * @param {object} [context]\n\t * @return {*}\n\t */\n\tprocess(input, context = {}) {\n\n\t\tlet expression = this.parser.parse(input);\n\t\treturn expression?.({\n\t\t\t...context,\n\t\t\texpression: input\n\t\t});\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A special kind of expression that requires the referenced rule consume all\n * available input.\n * \n * @param {string} ruleName\n * @return {Matchable}\n */\nexport const AllInput = ruleName => (input, parser) => {\n\tlet matchResult = parser.parseWithExpression(input, ruleName);\n\treturn matchResult !== null && input.exhausted() ? matchResult : null;\n};\n","/*\n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Default processor which returns the result as is.\n * \n * @template T\n * @param {T} result\n * @return {T}\n */\nconst defaultMatchProcessor = result => result;\n\n/**\n * A rule describes a string in the language.\n * \n * @author Emanuel Rabina\n */\nexport default class Rule {\n\n\t/**\n\t * @param {string} name\n\t * @param {object} expression\n\t * @param {Function} [matchProcessor]\n\t */\n\tconstructor(name, expression, matchProcessor = defaultMatchProcessor) {\n\n\t\tthis.name           = name;\n\t\tthis.expression     = expression;\n\t\tthis.matchProcessor = matchProcessor;\n\t}\n\n\t/**\n\t * Given an input string and a parser, return whether or not the input is\n\t * accepted by this rule.\n\t * \n\t * @param {InputBuffer} input\n\t * @param {Parser} parser\n\t * @return {object} If the input is accepted, this will be the non-null result\n\t *   of matching against the rule.\n\t */\n\taccept(input, parser) {\n\n\t\tlet {expression, name} = this;\n\t\treturn parser.trackExpression(input, expression, name, () => {\n\t\t\tlet matchResult = parser.parseWithExpression(input, expression);\n\t\t\treturn matchResult !== null ? this.matchProcessor(matchResult) : null;\n\t\t});\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Rule from '../../parser/Rule.js';\n\n/**\n * A custom rule where the default match processor returns a function to execute\n * against the current context to discover the matched value.\n */\nexport default class ThymeleafRule extends Rule {\n\n\t/**\n\t * @param {string} name\n\t * @param {object} expression\n\t * @param {Function} [matchProcessor]\n\t */\n\tconstructor(name, expression, matchProcessor) {\n\n\t\tconst contextSensitiveMatchProcessor = result => (...args) => {\n\t\t\t// console.log(`Processing rule: ${name}`);\n\t\t\treturn typeof result === 'function' ? result.apply(null, args) : result;\n\t\t};\n\t\tsuper(name, expression, matchProcessor || contextSensitiveMatchProcessor);\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A collection of Rules that describes a language.\n * \n * @author Emanuel Rabina\n */\nexport default class Grammar {\n\n\t/**\n\t * @param {string} name\n\t * @param {Rule} startingRule\n\t * @param {...Rule} additionalRules\n\t */\n\tconstructor(name, startingRule, ...additionalRules) {\n\n\t\tthis.name = name;\n\t\tthis.rules = [].concat(startingRule, additionalRules);\n\t}\n\n\t/**\n\t * Given an input string and a parser, return whether or not the input is\n\t * accepted by this grammar.\n\t * \n\t * @param {InputBuffer} input\n\t * @param {Parser} parser\n\t * @return {object} If the input is accepted, this will be the non-null result\n\t *   of matching against the rules of this grammar.\n\t */\n\taccept(input, parser) {\n\n\t\treturn this.startingRule.accept(input, parser);\n\t}\n\n\t/**\n\t * Return the rule that has the given name.\n\t * \n\t * @param {string} name\n\t * @return {Rule}\n\t */\n\tfindRuleByName(name) {\n\n\t\tlet rule = this.rules.find(rule => rule.name === name);\n\t\tif (!rule) {\n\t\t\tthrow new Error(`Failed to find a rule named \"${name}\" in the grammar`);\n\t\t}\n\t\treturn rule;\n\t}\n\n\t/**\n\t * Returns the grammar's starting rule.\n\t * \n\t * @return {Rule}\n\t */\n\tget startingRule() {\n\n\t\treturn this.rules[0];\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns an expression function where the underlying expression doesn't need\n * to be matched.  Thus, optional expressions \"always\" match.\n * \n * @param {Matchable} expression\n * @return {Matchable}\n */\nexport const Optional = expression => (input, parser) => {\n\treturn input.markAndClearOrReset(() => {\n\t\tlet result = parser.parseWithExpression(input, expression);\n\t\treturn result !== null ? result : '';\n\t});\n};\n\n/**\n * Returns an expression function where the expression must be matched against\n * at least once to be considered a match.\n * \n * @param {Matchable} expression\n * @return {Matchable}\n */\nexport const OneOrMore = (expression) => (input, parser) => {\n\treturn input.markAndClearOrReset(() => {\n\t\tlet results = [];\n\t\twhile (true) {\n\t\t\tlet result = input.markAndClearOrReset(() => {\n\t\t\t\treturn parser.parseWithExpression(input, expression);\n\t\t\t});\n\t\t\tif (result) {\n\t\t\t\tresults.push(result);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn results.length > 0 ? results : null;\n\t});\n};\n\n/**\n * Returns an expression function where only one of the underlying expressions\n * must be matched in order to consider the expression a match.\n * \n * @param {...Matchable} expressions\n * @return {Matchable}\n */\nexport const OrderedChoice = (...expressions) => (input, parser) => {\n\treturn input.markAndClearOrReset(() => {\n\t\tfor (let expression of expressions) {\n\t\t\tlet result = input.markAndClearOrReset(() => {\n\t\t\t\treturn parser.parseWithExpression(input, expression);\n\t\t\t});\n\t\t\tif (result !== null) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t});\n};\n\n/**\n * Returns an expression whose underlying expressions must be matched in order\n * to consider the entire expression a match.\n * \n * @param {...Matchable} expressions\n * @return {Matchable}\n */\nexport const Sequence = (...expressions) => (input, parser) => {\n\treturn input.markAndClearOrReset(() => {\n\t\tlet results = [];\n\t\tfor (let expression of expressions) {\n\t\t\tlet result = input.markAndClearOrReset(() => {\n\t\t\t\treturn parser.parseWithExpression(input, expression);\n\t\t\t});\n\t\t\tif (result === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tresults.push(result);\n\t\t}\n\t\treturn results;\n\t});\n};\n\n/**\n * Returns an expression function where the expression can be matched a repeated\n * number of times or none at all to be considered a match.\n * \n * @param {Matchable} expression\n * @return {Matchable}\n */\nexport const ZeroOrMore = (expression) => (input, parser) => {\n\treturn input.markAndClearOrReset(() => {\n\t\tlet results = [];\n\t\twhile (true) {\n\t\t\tlet result = input.markAndClearOrReset(() => {\n\t\t\t\treturn parser.parseWithExpression(input, expression);\n\t\t\t});\n\t\t\tif (result) {\n\t\t\t\tresults.push(result);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn results;\n\t});\n};\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Flattens an array of arrays of infinite depth into a single-dimension array.\n *\n * > This is now natively in JavaScript as the `flat` method on an Array\n * > instance.  [Check MDN for which browsers have access to this feature](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat).\n * > If you can't use `flat`, then this method will do the job 🙂\n *\n * @param {Array<any>} array\n * @return {Array<any>} Flattened array.\n */\nexport function flatten(array) {\n  return array.reduce((acc, value) => {\n    return acc.concat(Array.isArray(value) ? flatten(value) : value);\n  }, []);\n}\n\n/**\n * Creates an array of numbers from the starting value (inclusive) to the end\n * (exclusive), with an optional step (the gap between values).\n *\n * @param {Number} start\n *   The value to start at, the first item in the returned array.\n * @param {Number} end\n *   The value to end with, the last item in the returned array.\n * @param {Number} [step=1]\n *   The increment/gap between values, defaults to 1.\n * @return {number[]} An array encompassing the given range.\n */\nexport function range(start, end) {\n  let step = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  return Array.apply(0, Array(Math.ceil((end - start) / step))).map((empty, index) => index * step + start);\n}\n\n/**\n * A function to execute on each item in an array, returning truthy\n * if the item passes whatever test is required for the use of this\n * predicate.\n *\n * @template T\n * @callback Predicate<T>\n * @param {T} item\n * @return {boolean}\n */\n\n/**\n * Remove and return the first item from `array` that matches the predicate\n * function.\n *\n * @template T\n * @param {T[]} array\n * @param {Predicate<T>} predicate\n *   Function to test each item of the array with.  If it returns a truthy value\n *   for the item, then that item is removed and returned.\n * @return {T | undefined} The matching item, or `undefined` if no match was found.\n */\nexport function remove(array, predicate) {\n  return array.find((item, index) => {\n    if (predicate(item)) {\n      array.splice(index, 1);\n      return item;\n    }\n    return false;\n  });\n}\n\n//# sourceMappingURL=array-utils.es.js.map","/* \n * Copyright 2019, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AllInput}                       from './AllInput.js';\nimport ThymeleafRule                    from './ThymeleafRule.js';\nimport Grammar                          from '../../parser/Grammar.js';\nimport {Optional, Sequence, ZeroOrMore} from '../../parser/Operators.js';\n\nimport {flatten} from '@ultraq/array-utils';\n\n/**\n * Grammar for Thymeleaf fragment signatures.  This is separate from the\n * expression language as these are not expressions, but rather marker syntaxes.\n * \n * @author Emanuel Rabina\n */\nexport default new Grammar('Thymeleaf fragment signature',\n\n\tnew ThymeleafRule('ThymeleafFragmentSignatureRule',\n\t\tAllInput('FragmentSignature')\n\t),\n\n\t/**\n\t * The target end of a fragment expression, contains the fragment name and\n\t * optional parameter names.\n\t */\n\tnew ThymeleafRule('FragmentSignature',\n\t\tSequence('FragmentName', Optional('FragmentParameters')),\n\t\t([fragmentName, parameterNames]) => context => {\n\t\t\treturn {\n\t\t\t\tfragmentName: fragmentName(context),\n\t\t\t\tparameterNames: parameterNames ? parameterNames(context) : null\n\t\t\t};\n\t\t}\n\t),\n\tnew ThymeleafRule('FragmentName', /[\\w-._]+/),\n\tnew ThymeleafRule('FragmentParameters',\n\t\tSequence(/\\(/, ZeroOrMore('FragmentParameterNames'), /\\)/),\n\t\t([, [parameterNames]]) => context => {\n\t\t\treturn parameterNames(context);\n\t\t}\n\t),\n\tnew ThymeleafRule('FragmentParameterNames',\n\t\tSequence('Identifier', ZeroOrMore(Sequence(/,/, 'Identifier'))),\n\t\t(namesAndSeparators) => context => {\n\t\t\treturn namesAndSeparators ?\n\t\t\t\tflatten(namesAndSeparators)\n\t\t\t\t\t.filter(item => item !== ',')\n\t\t\t\t\t.map(name => name(context)) :\n\t\t\t\t[];\n\t\t}\n\t),\n\n\n\t// Common language basics\n\t// ======================\n\n\tnew ThymeleafRule('Identifier', /[#a-zA-Z_][\\w]*/)\n);\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AllInput}          from './AllInput.js';\nimport ExpressionProcessor from './ExpressionProcessor.js';\nimport ThymeleafRule       from './ThymeleafRule.js';\nimport Grammar             from '../../parser/Grammar.js';\nimport {\n\tOptional,\n\tOneOrMore,\n\tOrderedChoice,\n\tSequence,\n\tZeroOrMore\n}                          from '../../parser/Operators.js';\nimport {RegularExpression} from '../../parser/RegularExpression.js';\nimport {getByPath}       from '../../utilities/getByPath';\n\nimport {flatten, remove} from '@ultraq/array-utils';\n\n// For helping identify rules that return objects\nconst METADATA_FRAGMENT  = 'fragment';\nconst METADATA_ITERATION = 'iteration';\nconst METADATA_MESSAGE   = 'message';\n\n/**\n * Grammar for the Thymeleaf expression language.  Describes the language and\n * how to parse it.\n * \n * @author Emanuel Rabina\n */\nconst ThymeleafExpressionLanguage = new Grammar('Thymeleaf Expression Language',\n\n\t// Ordered as at https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#standard-expression-syntax\n\tnew ThymeleafRule('ThymeleafExpression',\n\t\tOrderedChoice(\n\t\t\tAllInput('VariableExpression'),\n\t\t\tAllInput('MessageExpression'),\n\t\t\tAllInput('LinkExpression'),\n\t\t\tAllInput('FragmentExpression'),\n\t\t\tAllInput('Iteration'),\n\t\t\tAllInput('StringConcatenation'),\n\t\t\tAllInput('ScopedVariables'),\n\t\t\tAllInput('Literal'),\n\t\t\tAllInput('LogicalExpression'),\n\t\t\tAllInput('IfThenCondition'),\n\t\t\tAllInput('IfThenElseCondition'),\n\t\t\tAllInput('TokenLiteral'),\n\t\t\tAllInput('Nothing')\n\t\t)\n\t),\n\n\n\t// Simple expressions\n\t// ==================\n\n\t/**\n\t * Variable expressions, `${variable}`.  Represents a value to be retrieved\n\t * from the current context.  Also is an entry into the underlying expression\n\t * language, so this part often extends to do what OGNL (and thus SpEL) can\n\t * do.\n\t */\n\n\tnew ThymeleafRule('VariableExpression',\n\t\tSequence(/\\${/, 'Chain', /\\}/),\n\t\t([, chain]) => context => {\n\t\t\tlet result = chain(context);\n\t\t\treturn result !== null && result !== undefined ? result : '';\n\t\t}\n\t),\n\tnew ThymeleafRule('Chain',\n\t\tSequence(Optional('Negation'), 'ChainLink', ZeroOrMore(Sequence(/\\./, 'ChainLink'))),\n\t\t([negation, ...chain]) => context => {\n\t\t\tlet result = flatten(chain).filter(link => link !== '.').reduce((linkContext, nextLink) => {\n\t\t\t\tif (linkContext === null || linkContext === undefined) {\n\t\t\t\t\treturn linkContext;\n\t\t\t\t}\n\t\t\t\treturn nextLink(linkContext, context);\n\t\t\t}, context);\n\t\t\t// TODO: Need a better way of applying negation - this fails when I\n\t\t\t//       introduce the 'not' keyword\n\t\t\treturn typeof negation === 'function' ? !result : result;\n\t\t}\n\t),\n\tnew ThymeleafRule('ChainLink',\n\t\tOrderedChoice('MethodCall', 'ArrayIndex', 'PropertyName', 'Literal')\n\t),\n\n\t/**\n\t * Message expressions, `#{messageKey(parameters)}`.  Used for referencing\n\t * text from a resource file, often for localization purposes.\n\t */\n\tnew ThymeleafRule('MessageExpression',\n\t\tSequence(/#{/, 'MessageKey', Optional(Sequence(/\\(/, Sequence('Expression', ZeroOrMore(Sequence(/,/, 'Expression'))), /\\)/)), /}/),\n\t\t([, messageKey, [, messageParameters]]) => context => {\n\t\t\treturn {\n\t\t\t\ttype: METADATA_MESSAGE,\n\t\t\t\tkey: messageKey(context),\n\t\t\t\tparameters: messageParameters ?\n\t\t\t\t\tflatten(messageParameters)\n\t\t\t\t\t\t.filter(messageParameter => typeof messageParameter === 'function')\n\t\t\t\t\t\t.map(messageParameter => messageParameter(context)) :\n\t\t\t\t\tnull\n\t\t\t};\n\t\t}\n\t),\n\tnew ThymeleafRule('MessageKey', /[\\w.-]+/),\n\n\t/**\n\t * Link expressions, `@{url(parameters)}`.  Used for generating URLs out of\n\t * context parameters.\n\t * \n\t * TODO: Change this to use the other expression types so I can remove this\n\t *       bespoke operator.\n\t */\n\tnew ThymeleafRule('LinkExpression',\n\t\tRegularExpression(/^@\\{(.+?)(\\(.+\\))?\\}$/, ['Url', 'UrlParameters']),\n\t\t([, urlFunc, parameters]) => context => {\n\n\t\t\tlet url = urlFunc(context);\n\t\t\tif (parameters) {\n\n\t\t\t\t// TODO: Push this parsing of the parameters list back into the grammar\n\t\t\t\tlet expressionProcessor = new ExpressionProcessor(ThymeleafExpressionLanguage);\n\t\t\t\tlet paramsList = parameters(context).slice(1, -1).split(',').map(param => {\n\t\t\t\t\tlet [lhs, rhs] = param.split('=');\n\t\t\t\t\treturn [lhs, expressionProcessor.process(rhs, context)];\n\t\t\t\t});\n\n\t\t\t\t// Fill out any placeholders in the URL from the parameters\n\t\t\t\twhile (true) { // eslint-disable-line\n\t\t\t\t\tlet urlTemplate = /(.*?)\\{(.+?)\\}(.*)/.exec(url);\n\t\t\t\t\tif (urlTemplate) {\n\t\t\t\t\t\tlet [, head, placeholder, tail] = urlTemplate;\n\t\t\t\t\t\tlet paramEntry = remove(paramsList, ([lhs]) => lhs === placeholder);\n\t\t\t\t\t\tif (paramEntry) {\n\t\t\t\t\t\t\turl = `${head}${paramEntry[1]}${tail}`;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Remaining parameters become search query parameters\n\t\t\t\tif (paramsList.length) {\n\t\t\t\t\turl += `?${paramsList.map(([key, value]) => `${key}=${value}`).join('&')}`;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn url;\n\t\t}\n\t),\n\tnew ThymeleafRule('Url', /.+/),\n\tnew ThymeleafRule('UrlParameters', /\\((.+)\\)/),\n\n\t/**\n\t * Fragment expressions, `~{template :: fragment(parameters)}`.  A locator for\n\t * a piece of HTML in the same or another template.\n\t */\n\tnew ThymeleafRule('FragmentExpression',\n\t\tSequence(/~{/, 'TemplateName', /::/, 'FragmentName', Optional('FragmentParametersSection'), /}/),\n\t\t([, templateName, , fragmentName, parameters]) => context => {\n\n\t\t\t// TODO: Should executing a fragment expression locate and return the\n\t\t\t//       fragment?  If so, then it'll make expression execution\n\t\t\t//       asynchronous!\n\t\t\treturn {\n\t\t\t\ttype: METADATA_FRAGMENT,\n\t\t\t\ttemplateName: templateName(context),\n\t\t\t\tfragmentName: fragmentName(context),\n\t\t\t\tparameters: parameters ? parameters(context) : null\n\t\t\t};\n\t\t}\n\t),\n\tnew ThymeleafRule('TemplateName',\n\t\tOrderedChoice(\n\t\t\t/[\\w-._/]+/,\n\t\t\t'VariableExpression'\n\t\t)\n\t),\n\tnew ThymeleafRule('FragmentName', /[\\w-._]+/),\n\tnew ThymeleafRule('FragmentParametersSection',\n\t\tSequence(/\\(/, Optional('FragmentParameters'), /\\)/),\n\t\t([, parameters]) => context => {\n\t\t\treturn parameters(context);\n\t\t}\n\t),\n\tnew ThymeleafRule('FragmentParameters',\n\t\tSequence('Expression', ZeroOrMore(Sequence(/,/, 'Expression'))),\n\t\t(expressionsAndSeparators) => context => {\n\t\t\treturn expressionsAndSeparators ?\n\t\t\t\tflatten(expressionsAndSeparators)\n\t\t\t\t\t.filter(item => item !== ',')\n\t\t\t\t\t.map(expressions => expressions(context)) :\n\t\t\t\t[];\n\t\t}\n\t),\n\n\n\t// Complex expressions\n\t// ===================\n\n\t/**\n\t * Iteration, `localVar : ${collection}`.  The name of the variable for each\n\t * loop, followed by the collection being iterated over.\n\t */\n\tnew ThymeleafRule('Iteration',\n\t\tSequence('Identifier', Optional(Sequence(/,/, 'Identifier')), /:/, 'VariableExpression'),\n\t\t([localValueName, [, iterationStatusVariable], , collectionExpressionAction]) => context => ({\n\t\t\ttype: METADATA_ITERATION,\n\t\t\tlocalValueName: localValueName(context),\n\t\t\titerable: collectionExpressionAction(context),\n\t\t\titerationStatusVariable: iterationStatusVariable ? iterationStatusVariable(context) : null\n\t\t})\n\t),\n\n\t/**\n\t * Scoped variable aliases, `key=${expression},...`, describes one or more\n\t * names for scoped variables with the expressions that can be their values.\n\t */\n\tnew ThymeleafRule('ScopedVariables',\n\t\tSequence('ScopedVariable', ZeroOrMore(Sequence(/,/, 'ScopedVariable'))),\n\t\t(aliases) => context => {\n\t\t\treturn flatten(aliases).map(alias => alias(context));\n\t\t}\n\t),\n\tnew ThymeleafRule('ScopedVariable',\n\t\tSequence('Identifier', /=/, 'Expression'),\n\t\t([name, , expression]) => context => ({\n\t\t\tname: name(context),\n\t\t\tvalue: expression(context)\n\t\t})\n\t),\n\n\t// Literals\n\t// ========\n\n\tnew ThymeleafRule('Literal',\n\t\tOrderedChoice(\n\t\t\t'StringLiteral',\n\t\t\t'NumberLiteral',\n\t\t\t'BooleanLiteral',\n\t\t\t'NullLiteral'\n\t\t)\n\t),\n\n\t/**\n\t * String literal, characters surrounded by `'` (single quotes).\n\t * \n\t * The first part is attempting to match an empty string as the second part\n\t * doesn't work on empty strings.\n\t * \n\t * The second part is trying to emulate negative lookbehind so that escaped\n\t * quotes don't get counted as string terminators, but JavaScript only got\n\t * that feature in ES2018, so if I used it it'd leave too many JS engines\n\t * without support.\n\t */\n\tnew ThymeleafRule('StringLiteral', /''|'.*?(?!\\\\').'/, result => () => result.slice(1, -1).replace(/\\\\/g, '')),\n\n\t/**\n\t * A number.\n\t */\n\tnew ThymeleafRule('NumberLiteral', /\\d+(\\.\\d+)?/, result => () => parseFloat(result)),\n\n\t/**\n\t * One of `true` or `false`.\n\t */\n\tnew ThymeleafRule('BooleanLiteral', /(true|false)/, result => () => result === 'true'),\n\n\t/**\n\t * The word `null` to represent the null value.\n\t */\n\t// TODO: The parser uses null to mean 'failed parse', so this might not work?\n\tnew ThymeleafRule('NullLiteral', /null/, () => () => null),\n\n\t/**\n\t * A token literal, which is pretty much anything else that can't be categorized\n\t * by the other literal types.  This is often used as a fallback in the\n\t * expression language so that, for any unknown input, we're still returning\n\t * something.\n\t */\n\tnew ThymeleafRule('TokenLiteral', /[^: ${}]+/, result => () => result),\n\n\n\t// Text operations\n\t// ===============\n\n\n\t/**\n\t * String concatenation, `'...' + '...'` or even `${...} + ${...}`, the\n\t * joining of 2 expressions by way of the `+` operator.\n\t */\n\tnew ThymeleafRule('StringConcatenation',\n\t\tSequence('Concatenatable', OneOrMore(Sequence(/\\+/, 'Concatenatable'))),\n\t\t(values) => context => {\n\t\t\treturn flatten(values).filter(item => item !== '+').reduce((result, value) => {\n\t\t\t\treturn result + (typeof value === 'function' ? value(context) : value);\n\t\t\t}, '');\n\t\t}\n\t),\n\tnew ThymeleafRule('Concatenatable',\n\t\tOrderedChoice(\n\t\t\t'StringLiteral',\n\t\t\t'VariableExpression'\n\t\t)\n\t),\n\n\tnew ThymeleafRule('LiteralSubstitution', Sequence(/^\\|/, OneOrMore(Sequence(/[^$|]*/, 'VariableExpression', /[^$|]*/)), /\\|$/), ([, matchers]) => context => {\n\t\treturn flatten(matchers).reduce((curr, acc) => {\n\t\t\tif (typeof acc === 'string') {\n\t\t\t\treturn curr + acc;\n\t\t\t}\n\t\t\treturn curr + acc(context);\n\t\t}, '');\n\t}),\n\n\n\t// Arithmetic operations\n\t// =====================\n\n\n\t// Boolean operations\n\t// ==================\n\n\tnew ThymeleafRule('LogicalOperation',\n\t\tOrderedChoice('LogicalAndOperation', 'LogicalOrOperation')\n\t),\n\tnew ThymeleafRule('LogicalAndOperation',\n\t\tSequence('Expression', 'LogicalAndOperator', 'Expression'),\n\t\t([leftOperand, , rightOperand]) => context => {\n\t\t\tlet lhs = leftOperand(context);\n\t\t\tlet rhs = rightOperand(context);\n\t\t\treturn lhs && rhs;\n\t\t}\n\t),\n\tnew ThymeleafRule('LogicalAndOperator',\n\t\tOrderedChoice(/&&/, /and/)\n\t),\n\tnew ThymeleafRule('LogicalOrOperation',\n\t\tSequence('Expression', 'LogicalOrOperator', 'Expression'),\n\t\t([leftOperand, , rightOperand]) => context => {\n\t\t\tlet lhs = leftOperand(context);\n\t\t\tlet rhs = rightOperand(context);\n\t\t\treturn lhs || rhs;\n\t\t}\n\t),\n\tnew ThymeleafRule('LogicalOrOperator',\n\t\tOrderedChoice(/\\|\\|/, /or/)\n\t),\n\n\tnew ThymeleafRule('Negation', /!/),\n\n\n\t// Comparisons and equality\n\t// ========================\n\n\t/**\n\t * An operation for comparing the equality of each side of the operator.\n\t */\n\tnew ThymeleafRule('EqualityOperation',\n\t\tSequence('Expression', 'EqualityOperator', 'Expression'),\n\t\t([leftOperand, operator, rightOperand]) => context => {\n\t\t\tlet lhs = leftOperand(context);\n\t\t\tlet rhs = rightOperand(context);\n\t\t\tswitch (operator(context)) {\n\t\t\t\tcase '==':  return lhs == rhs; // eslint-disable-line\n\t\t\t\tcase 'eq':\n\t\t\t\tcase '===': return lhs === rhs;\n\t\t\t\tcase '!=':  return lhs != rhs; // eslint-disable-line\n\t\t\t\tcase 'ne':\n\t\t\t\tcase '!==': return lhs !== rhs;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t),\n\tnew ThymeleafRule('EqualityOperator',\n\t\tOrderedChoice(/[=!]==?/, /eq/, /ne/)\n\t),\n\n\n\t// Conditional operators\n\t// =====================\n\n\t/**\n\t * A logical expression is any expression that resolves to a `true`/`false`\n\t * value.\n\t */\n\tnew ThymeleafRule('LogicalExpression',\n\t\tOrderedChoice(\n\t\t\t'EqualityOperation',\n\t\t\t'LogicalOperation',\n\t\t\t'Expression'\n\t\t)\n\t),\n\n\t/**\n\t * If-then condition, `if ? then`.  This is the truthy branch only of the\n\t * classic ternary operator.  The falsey branch is a no-op.\n\t */\n\tnew ThymeleafRule('IfThenCondition',\n\t\tSequence('LogicalExpression', /\\?/, 'Expression'),\n\t\t([condition, , truthyExpression]) => context => {\n\t\t\treturn condition(context) ? truthyExpression(context) : undefined;\n\t\t}\n\t),\n\n\t/**\n\t * If-then-else condition, `if ? then : else`, the classic ternary operator.\n\t */\n\tnew ThymeleafRule('IfThenElseCondition',\n\t\tSequence('LogicalExpression', /\\?/, 'Expression', /:/, 'Expression'),\n\t\t([condition, , truthyExpression, , falseyExpression]) => context => {\n\t\t\treturn condition(context) ? truthyExpression(context) : falseyExpression(context);\n\t\t}\n\t),\n\n\n\t// Special tokens\n\t// ==============\n\n\t/**\n\t * An expression that matches the empty string.\n\t */\n\tnew ThymeleafRule('Nothing', /^$/),\n\n\n\t// Common language basics\n\t// ======================\n\n\tnew ThymeleafRule('Identifier', /[#a-zA-Z_][\\w]*/),\n\tnew ThymeleafRule('PropertyName', 'Identifier',\n\t\t(propertyName) => context => {\n\t\t\tlet property = propertyName(context);\n\t\t\treturn Object.prototype.hasOwnProperty.call(context, property) ? context[property] : '';\n\t\t}\n\t),\n\tnew ThymeleafRule('ArrayIndex', /([\\w]+)?(\\[[\\d]*])+/,\n\t\t(path) => context => {\n\t\t\treturn getByPath(context, path);\n\t\t}\n\t),\n\tnew ThymeleafRule('MethodCall',\n\t\tSequence('MethodName', /\\(/, Optional('MethodParameters'), /\\)/),\n\t\t([name, , parameters]) => (context, parameterContext) => {\n\t\t\tlet methodName = name(context);\n\t\t\tlet method = context[methodName];\n\t\t\tif (!method) {\n\t\t\t\tconsole.warn(`No method '${methodName}' present on the current context.  Expression: ${context.expression}`);\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\treturn method.apply(context, parameters(parameterContext || context));\n\t\t}\n\t),\n\tnew ThymeleafRule('MethodName', 'Identifier'),\n\tnew ThymeleafRule('MethodParameters',\n\t\tSequence('Chain', ZeroOrMore(Sequence(/,/, 'Chain'))),\n\t\t(parametersAndSeparators) => context => {\n\t\t\treturn parametersAndSeparators ?\n\t\t\t\tflatten(parametersAndSeparators)\n\t\t\t\t\t.filter(item => item !== ',')\n\t\t\t\t\t.map(parameter => parameter(context)) :\n\t\t\t\t[];\n\t\t}\n\t),\n\n\t/**\n\t * Any valid unit of code that resolves to some value.\n\t */\n\tnew ThymeleafRule('Expression',\n\t\tOrderedChoice(\n\t\t\t'LiteralSubstitution',\n\t\t\t'VariableExpression',\n\t\t\t'StringConcatenation',\n\t\t\t'Literal'\n\t\t)\n\t)\n);\n\nexport default ThymeleafExpressionLanguage;\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport InputBuffer from './InputBuffer';\n\n/**\n * A special kind of expression that understands matched portions of regular\n * expressions to run processing over, which may lead to additional parsing\n * expressions.\n * \n * This expression should be used sparingly as the regexes within need to take\n * care of whitespace between tokens themselves, which can be annoying.\n * \n * @param {RegExp} expression\n * @param {Array<Matchable>} matchers\n * @return {Matchable}\n */\nexport const RegularExpression = (expression, matchers) => (input, parser) => {\n\treturn input.markAndClearOrReset(() => {\n\t\tlet result = input.read(expression);\n\t\tif (result) {\n\t\t\tlet parseResults = [result[0]];\n\t\t\tfor (let i = 1; i < result.length; i++) {\n\t\t\t\tlet match = result[i];\n\t\t\t\tif (match !== undefined) {\n\t\t\t\t\tlet parseResult = parser.parseWithExpression(new InputBuffer(match), matchers[i - 1]);\n\t\t\t\t\tif (parseResult === null) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tparseResults.push(parseResult);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn parseResults;\n\t\t}\n\t\treturn null;\n\t});\n};\n","/**\n *\n * @param {object|Array} obj\n * @param {string} path\n * @return {*}\n */\nexport function getByPath(obj, path) {\n\tconst paths = getPathArray(path);\n\tlet requestedObject = Array.isArray(obj) ? [...obj] : {...obj};\n\n\tfor (let i = 0; i < paths.length; i++) {\n\t\ttry {\n\t\t\tif (requestedObject[paths[i]] === undefined) {\n\t\t\t\trequestedObject = null;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\trequestedObject = requestedObject[paths[i]];\n\t\t}\n\t\tcatch (e) {\n\t\t\trequestedObject = null;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn requestedObject;\n}\n\n/**\n * Helper function to convert array like path string into array\n *\n * @param {string} path\n * @return {Array<string>}\n */\nexport function getPathArray(path) {\n\treturn path.split('.').reduce((acc, el) => {\n\t\treturn acc.concat(el.replace(/[\"']/g, '')\n\t\t\t.split('[')\n\t\t\t.filter(i => i !== '')\n\t\t\t.map(i => i.replace(']', '')));\n\t}, []);\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DEFAULT_CONFIGURATION}     from './Configurations.js';\nimport AttributeProcessor          from './processors/AttributeProcessor.js';\nimport ElementProcessor            from './processors/ElementProcessor.js';\nimport Matcher                     from './processors/Matcher.js';\nimport ExpressionProcessor         from './standard/expressions/ExpressionProcessor.js';\nimport FragmentSignatureGrammar    from './standard/expressions/FragmentSignatureGrammar.js';\nimport ThymeleafExpressionLanguage from './standard/expressions/ThymeleafExpressionLanguage.js';\nimport {deserialize, serialize}    from './utilities/Dom.js';\nimport {promisify}                 from './utilities/Functions.js';\n\nimport {readFile} from 'fs';\n\n/**\n * A highly-configurable class responsible for processing the Thymeleaf\n * directives found in HTML documents and fragments.\n * \n * @author Emanuel Rabina\n */\nexport default class TemplateEngine {\n\n\t/**\n\t * Constructor, set up a new template engine instance.\n\t * \n\t * @param {object} [config]\n\t * @param config.dialects\n\t * @param config.messageResolver\n\t * @param config.templateResolver\n\t */\n\tconstructor({dialects, messageResolver, templateResolver} = DEFAULT_CONFIGURATION) {\n\n\t\tthis.messageResolver  = messageResolver;\n\t\tthis.templateResolver = templateResolver;\n\t\tthis.expressionProcessor = new ExpressionProcessor(ThymeleafExpressionLanguage);\n\t\tthis.fragmentSignatureProcessor = new ExpressionProcessor(FragmentSignatureGrammar);\n\n\t\t// Combine all processors into a unified list\n\t\tthis.processors = dialects.reduce((acc, {processors}) => processors ? [\n\t\t\t...acc,\n\t\t\t...processors\n\t\t] : acc, []);\n\n\t\t// Combine all expression objects into a unified object\n\t\tthis.expressionObjects = dialects.reduce((acc, {expressionObjects}) => expressionObjects ? {\n\t\t\t...acc,\n\t\t\t...expressionObjects\n\t\t} : acc, {});\n\t}\n\n\t/**\n\t * Process the Thymeleaf template data, returning the processed template.\n\t *\n\t * @param {string} template\n\t * @param {object} [context]\n\t * @return {Promise<string>}\n\t *   A promise resolved with the processed template, or rejected with an error\n\t *   message.\n\t */\n\tprocess(template, context = {}) {\n\n\t\tlet documentFragment = deserialize(template);\n\t\tlet rootElement = documentFragment.firstElementChild;\n\t\treturn this.processNode(rootElement, {\n\t\t\t...context,\n\t\t\t...this.expressionObjects,\n\t\t\t// TODO: Is there some way to make these things a dependency of the\n\t\t\t//       processors that need them?  Otherwise it feels like passing\n\t\t\t//       dependencies as part of the context object 🤔\n\t\t\texpressionProcessor: this.expressionProcessor,\n\t\t\tfragmentSignatureProcessor: this.fragmentSignatureProcessor,\n\t\t\tmessageResolver:  this.messageResolver,\n\t\t\ttemplateResolver: this.templateResolver\n\t\t})\n\t\t\t.then(() => {\n\t\t\t\treturn serialize(documentFragment);\n\t\t\t});\n\t}\n\n\t/**\n\t * Process the Thymeleaf template at the given path, returning a promise of\n\t * the processed template.\n\t * \n\t * @param {string} filePath\n\t * @param {object} [context]\n\t * @return {Promise<string>}\n\t *   A promise of the processed template.  The promise is immediately rejected\n\t *   if this method is called in a browser environment.\n\t */\n\tprocessFile(filePath, context = {}) {\n\n\t\t/* global ENVIRONMENT */\n\t\treturn ENVIRONMENT === 'browser' ?\n\t\t\tPromise.reject(new Error('Cannot use TemplateEngine.processFile() inside a browser')) :\n\t\t\tpromisify(readFile)(filePath)\n\t\t\t\t.then(data => {\n\t\t\t\t\treturn this.process(data, context);\n\t\t\t\t});\n\t}\n\n\t/**\n\t * Process a DOM element.\n\t * \n\t * @private\n\t * @param {Element} element\n\t * @param {object} [context]\n\t * @return {Promise<boolean>} Whether or not the parent node needs\n\t *   reprocessing.\n\t */\n\tasync processNode(element, context = {}) {\n\n\t\tlet localVariables = element.__thymeleafLocalVariables || {};\n\t\tlet localContext = {\n\t\t\t...context,\n\t\t\t...localVariables\n\t\t};\n\t\tlet matcher = new Matcher();\n\n\t\t// Run the current element through the gamut of registered processors.  If\n\t\t// one of them sends a reprocessing signal, return from this method to let\n\t\t// the caller re-run everything.\n\t\tfor (let i = 0; i < this.processors.length; i++) {\n\t\t\tlet processor = this.processors[i];\n\t\t\tlet processorResult = false;\n\n\t\t\tlet match = matcher.matches(element, processor);\n\t\t\tif (match) {\n\t\t\t\tif (processor instanceof AttributeProcessor) {\n\t\t\t\t\tprocessorResult = await processor.process(element, match,\n\t\t\t\t\t\telement.getAttribute(match), localContext);\n\t\t\t\t}\n\t\t\t\telse if (processor instanceof ElementProcessor) {\n\t\t\t\t\tprocessorResult = await processor.process(element, localContext);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (processorResult) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// Process this element's children, handling the reprocessing signal to\n\t\t// re-run the 'current' child element (could have been shifted due to being\n\t\t// removed etc).\n\t\tfor (let i = 0; i < element.children.length; ) {\n\t\t\tlet child = element.children[i];\n\t\t\tlet reprocess = await this.processNode(child, localContext);\n\t\t\tif (!reprocess) {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n}\n"],"names":["AttributeProcessor","constructor","prefix","name","isomorphic","this","process","element","attribute","attributeValue","context","removeAttribute","AttrAttributeProcessor","super","test","split","forEach","value","processorResult","expressionProcessor","string","setAttribute","JSON","stringify","replace","env","NODE_ENV","console","warn","ElementProcessor","clearChildren","firstChild","removeChild","getThymeleafAttributeValue","processorName","getAttribute","deserialize","htmlString","DOMParser","parseFromString","domDeserialize","serialize","documentFragment","documentOrFragment","nodeType","Node","DOCUMENT_NODE","result","contentType","docType","firstElementChild","tagName","outerHTML","domSerialize","BlockElementProcessor","parent","parentElement","child","insertBefore","__thymeleafLocalVariables","CheckedAttributeProcessor","ClassAppendAttributeProcessor","classes","className","EachAttributeProcessor","iterationInfo","localValueName","iterable","templateNode","cloneNode","localClone","appendChild","EmptyableAttributeProcessor","toString","EMPTYABLE_ATTRIBUTE_NAMES","NAME","FragmentAttributeProcessor","IfAttributeProcessor","remove","root","factory","module","exports","dumbQuerySelector","Object","keys","key","$","query","scope","document","querySelector","$$","Array","prototype","slice","call","querySelectorAll","async","extractFragment","dialectPrefix","fragmentInfo","templateResolver","templateName","fragmentName","template","log","InsertAttributeProcessor","fragment","fragmentSignature","FragmentAttributeProcessorName","parameterNames","fragmentSignatureProcessor","parameters","localContext","parameterName","index","RemovableAttributeProcessor","REMOVABLE_ATTRIBUTE_NAMES","RemoveAttributeProcessor","lastElementChild","ReplaceAttributeProcessor","TextAttributeProcessor","messageResult","textContent","messageInfo","messageResolver","buildMessage","UnlessAttributeProcessor","parentNode","UTextAttributeProcessor","innerHTML","WithAttributeProcessor","localVariables","_ref","XmlNsAttributeProcessor","Dialect","expressionObjects","processors","StandardDialect","arguments","length","undefined","map","attributeName","DEFAULT_CONFIGURATION","dialects","STANDARD_CONFIGURATION","Matcher","matches","processor","prefixes","unshift","hasAttribute","elementName","toUpperCase","InputBuffer","input","_defineProperty","clear","positionStack","pop","Error","exhausted","position","mark","push","markAndClearOrReset","func","reset","read","pattern","remaining","substring","leadingWhitespace","match","RegExp","source","exec","startsWith","newPosition","Parser","grammar","parse","inputBuffer","matchResult","accept","errorMessage","error","parseWithExpression","expression","rule","findRuleByName","trackExpression","stackSize","expressionStack","splice","ExpressionProcessor","parser","AllInput","ruleName","defaultMatchProcessor","Rule","matchProcessor","ThymeleafRule","_len","args","_key","apply","Grammar","startingRule","additionalRules","rules","concat","find","Optional","OneOrMore","results","OrderedChoice","expressions","Sequence","_len2","_key2","ZeroOrMore","flatten","array","reduce","acc","isArray","predicate","item","FragmentSignatureGrammar","_ref2","namesAndSeparators","filter","ThymeleafExpressionLanguage","chain","negation","link","linkContext","nextLink","_ref3","messageKey","messageParameters","type","messageParameter","matchers","parseResults","i","parseResult","_ref4","urlFunc","url","paramsList","param","lhs","rhs","urlTemplate","head","placeholder","tail","paramEntry","_ref5","_ref6","join","_ref7","_ref8","expressionsAndSeparators","_ref9","iterationStatusVariable","collectionExpressionAction","aliases","alias","_ref10","parseFloat","values","_ref11","curr","_ref12","leftOperand","rightOperand","_ref13","_ref14","operator","_ref15","condition","truthyExpression","_ref16","falseyExpression","propertyName","property","hasOwnProperty","path","obj","paths","el","getPathArray","requestedObject","e","getByPath","_ref17","parameterContext","methodName","method","parametersAndSeparators","parameter","RegularExpression","ThymeleafExpressionLanguage$1","rootElement","processNode","then","processFile","filePath","Promise","reject","matcher","children"],"mappings":"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","x_google_ignoreList":[2,4,13,37]}