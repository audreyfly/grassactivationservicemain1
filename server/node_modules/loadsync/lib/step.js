'use strict';

var debug = require('debug')('loadsync:Step');

var Step = function Step(params) {
	debug.enabled && debug(' + constructor begin ...');

	this._ctx_ = {
		begin: true,
		callbacks: [],
		cards: [],
		timeout: 0,
		isTimeout: false,
		timeoutHandler: null
	};

	this.reset(params);

	debug.enabled && debug(' - constructor end!');
};

Step.prototype.reset = function(params) {
	params = params || {};
	debug.enabled && debug('reset() with: %s', JSON.stringify(params));

	this._ctx_.begin = true;
	this._ctx_.callbacks = [];
	this._ctx_.cards = (params.cards instanceof Array) ? params.cards : [];
	initTimeoutHandler.call(this, params.timeout || 0);

	return this;
}

Step.prototype.ready = function(callback) {
	debug.enabled && debug('ready() - append a new callback');
	if (typeof(callback) === 'function') {
		this._ctx_.callbacks.push(callback);
	}
	return check.call(this);
}

Step.prototype.checkIn = function(card) {
	debug.enabled && debug('checkIn() - card: %s', card || 'N/A');
	this._ctx_.cards.push(card);
	return this;
}

Step.prototype.checkOut = function(card) {
	debug.enabled && debug('checkOut() - for card: %s', card || 'N/A');
	var cardInd = this._ctx_.cards.indexOf(card);
	if (cardInd >= 0 && !this._ctx_.isTimeout) {
		this._ctx_.cards.splice(cardInd, 1);
		this._ctx_.begin = false;
	}
	return check.call(this);
}

Step.prototype.check = Step.prototype.checkOut;

var check = function(card) {
	var self = this;
	debug.enabled && debug('check() - cards: %s', JSON.stringify(self._ctx_.cards));
	if (self._ctx_.begin === false && 
			(self._ctx_.isTimeout || self._ctx_.cards.length === 0)) {
		var info = { isTimeout: self._ctx_.isTimeout, unchecked: self._ctx_.cards };
		if (self._ctx_.isTimeout) {
			debug.enabled && debug('check() - step is expired, run callbacks');
		} else {
			debug.enabled && debug('check() - all of cards has been checked');
		}
		var cbs = self._ctx_.callbacks || [];
		if (cbs.length > 0) {
			cbs.forEach(function(callback) {
				callback(info);
			});
		}
		self._ctx_.begin = true;
	}
	return self;
}

var initTimeoutHandler = function(timeout) {
	var self = this;
	if (typeof(timeout) === 'number') {
		if (self._ctx_.timeoutHandler) {
			clearTimeout(self._ctx_.timeoutHandler);
			self._ctx_.timeoutHandler = null;
		}
		self._ctx_.isTimeout = false;
		self._ctx_.timeout = timeout;
		if (self._ctx_.timeout > 0) {
			self._ctx_.timeoutHandler = setTimeout(function() {
				self._ctx_.isTimeout = true;
				check.call(self);
			}, self._ctx_.timeout);
		}
	}
}

module.exports = Step;
