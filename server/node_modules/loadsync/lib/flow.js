'use strict';

var debug = require('debug')('loadsync:Flow');
var Step = require('./step');

var Flow = function Flow(steps) {
	debug.enabled && debug(' + constructor begin ...');
	var self = this;
	steps = steps || [];
	
	var validate = function(data, throwException) {
		var ok = true;
		if (!(data instanceof Array)) ok = false;
		if (!(data.length > 0)) ok = false;
		for(var idx = 0; idx<data.length; idx++) {
			var item = data[idx] || {};
			if (!(item.name instanceof String) && !(item.name.length > 0)) ok = false;
			if (!ok) break;
		}
		if (!ok && throwException) throw new Error();
		return ok;
	}

	var stepObjects = {};

	this.reset = function(steps) {
		steps = steps || [];
		debug.enabled && debug('reset() - steps: %s', JSON.stringify(steps));
		if (!validate(steps)) {
			debug.enabled && debug('invalid reset() parameters');
			return;
		}
		Object.keys(stepObjects).forEach(function(stepName) {
			stepObjects[stepName].reset();
			delete stepObjects[stepName];
		});
		steps.forEach(function(step) {
			stepObjects[step.name] = new Step(step);
			stepObjects[step.name].reset(step);
		});
		debug.enabled && debug('stepKeys: %s', JSON.stringify(Object.keys(stepObjects)));
	};

	['ready', 'check', 'checkIn', 'checkOut'].forEach(function(methodName) {
		debug.enabled && debug('methodName: %s', methodName);
		self[methodName] = function() {
			if (debug.enabled && methodName === 'check') {
				debug(methodName + '() - arguments: %s', arguments);
			}
			if (arguments.length === 0) {
				throw new Error('method_arguments_must_not_be_empty');
			}
			var step = arguments[arguments.length - 1];
			var method = stepObjects[step] && stepObjects[step][methodName];
			if (typeof(method) !== 'function') {
				throw new Error('the_last_argument_should_be_correct_step');
			}
			return method.apply(stepObjects[step], arguments);
		}
	});

	this.reset(steps);

	debug.enabled && debug(' - constructor end!');
};

var instance = null;
Flow.instance = Flow.singleton = function() {
	return (instance = instance || new Flow());
}

Flow.Step = Step;

module.exports = Flow;
